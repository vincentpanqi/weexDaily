!function(t){function e(i){if(n[i])return n[i].exports;var r=n[i]={exports:{},id:i,loaded:!1};return t[i].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){n(126);var i=n(167),r=n(168),o=n(169);__weex_define__("@weex-component/60a07ac3d3bc03dc6c569b20f45cb727",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r}),__weex_bootstrap__("@weex-component/60a07ac3d3bc03dc6c569b20f45cb727",void 0,void 0)},,,,function(t,e,n){n(5),n(9),n(13),n(17),n(21),n(25),n(66),n(70),n(74),n(78),n(79)},function(t,e,n){var i=n(6),r=n(7),o=n(8);__weex_define__("@weex-component/wxc-button",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){t.exports={type:"div",classList:function(){return["btn","btn-"+this.type,"btn-sz-"+this.size]},children:[{type:"text",classList:function(){return["btn-txt","btn-txt-"+this.type,"btn-txt-sz-"+this.size]},attr:{value:function(){return this.value}}}]}},function(t,e){t.exports={btn:{marginBottom:0,alignItems:"center",justifyContent:"center",borderWidth:1,borderStyle:"solid",borderColor:"#333333"},"btn-default":{color:"rgb(51,51,51)"},"btn-primary":{backgroundColor:"rgb(40,96,144)",borderColor:"rgb(40,96,144)"},"btn-success":{backgroundColor:"rgb(92,184,92)",borderColor:"rgb(76,174,76)"},"btn-info":{backgroundColor:"rgb(91,192,222)",borderColor:"rgb(70,184,218)"},"btn-warning":{backgroundColor:"rgb(240,173,78)",borderColor:"rgb(238,162,54)"},"btn-danger":{backgroundColor:"rgb(217,83,79)",borderColor:"rgb(212,63,58)"},"btn-link":{borderColor:"rgba(0,0,0,0)",borderRadius:0},"btn-txt-default":{color:"rgb(51,51,51)"},"btn-txt-primary":{color:"rgb(255,255,255)"},"btn-txt-success":{color:"rgb(255,255,255)"},"btn-txt-info":{color:"rgb(255,255,255)"},"btn-txt-warning":{color:"rgb(255,255,255)"},"btn-txt-danger":{color:"rgb(255,255,255)"},"btn-txt-link":{color:"rgb(51,122,183)"},"btn-sz-large":{width:300,height:100,paddingTop:25,paddingBottom:25,paddingLeft:40,paddingRight:40,borderRadius:15},"btn-sz-middle":{width:240,height:80,paddingTop:15,paddingBottom:15,paddingLeft:30,paddingRight:30,borderRadius:10},"btn-sz-small":{width:170,height:60,paddingTop:12,paddingBottom:12,paddingLeft:25,paddingRight:25,borderRadius:7},"btn-txt-sz-large":{fontSize:45},"btn-txt-sz-middle":{fontSize:35},"btn-txt-sz-small":{fontSize:30}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{type:"default",size:"large",value:""}},methods:{}}}},function(t,e,n){var i=n(10),r=n(11),o=n(12);__weex_define__("@weex-component/wxc-hn",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){t.exports={type:"div",classList:function(){return["h"+this.level]},style:{justifyContent:"center"},children:[{type:"text",classList:function(){return["txt-h"+this.level]},attr:{value:function(){return this.value}}}]}},function(t,e){t.exports={h1:{height:110,paddingTop:20,paddingBottom:20},h2:{height:110,paddingTop:20,paddingBottom:20},h3:{height:110,paddingTop:20,paddingBottom:20},"txt-h1":{fontSize:70},"txt-h2":{fontSize:52},"txt-h3":{fontSize:42}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{level:1,value:""}},methods:{}}}},function(t,e,n){var i=n(14),r=n(15),o=n(16);__weex_define__("@weex-component/wxc-list-item",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){t.exports={type:"div",classList:["item"],events:{touchstart:"touchstart",touchend:"touchend"},style:{backgroundColor:function(){return this.bgColor}},children:[{type:"content"}]}},function(t,e){t.exports={item:{paddingTop:25,paddingBottom:25,paddingLeft:35,paddingRight:35,height:160,justifyContent:"center",borderBottomWidth:1,borderColor:"#dddddd"}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{bgColor:"#ffffff"}},methods:{touchstart:function(){},touchend:function(){}}}}},function(t,e,n){var i=n(18),r=n(19),o=n(20);__weex_define__("@weex-component/wxc-panel",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){t.exports={type:"div",classList:function(){return["panel","panel-"+this.type]},style:{borderWidth:function(){return this.border}},children:[{type:"text",classList:function(){return["panel-header","panel-header-"+this.type]},style:{paddingTop:function(){return this.paddingHead},paddingBottom:function(){return this.paddingHead},paddingLeft:function(){return 1.5*this.paddingHead},paddingRight:function(){return 1.5*this.paddingHead}},attr:{value:function(){return this.title}}},{type:"div",classList:function(){return["panel-body","panel-body-"+this.type]},style:{paddingTop:function(){return this.paddingBody},paddingBottom:function(){return this.paddingBody},paddingLeft:function(){return 1.5*this.paddingBody},paddingRight:function(){return 1.5*this.paddingBody}},children:[{type:"content"}]}]}},function(t,e){t.exports={panel:{marginBottom:20,backgroundColor:"#ffffff",borderColor:"#dddddd",borderWidth:1},"panel-primary":{borderColor:"rgb(40,96,144)"},"panel-success":{borderColor:"rgb(76,174,76)"},"panel-info":{borderColor:"rgb(70,184,218)"},"panel-warning":{borderColor:"rgb(238,162,54)"},"panel-danger":{borderColor:"rgb(212,63,58)"},"panel-header":{backgroundColor:"#f5f5f5",fontSize:40,color:"#333333"},"panel-header-primary":{backgroundColor:"rgb(40,96,144)",color:"#ffffff"},"panel-header-success":{backgroundColor:"rgb(92,184,92)",color:"#ffffff"},"panel-header-info":{backgroundColor:"rgb(91,192,222)",color:"#ffffff"},"panel-header-warning":{backgroundColor:"rgb(240,173,78)",color:"#ffffff"},"panel-header-danger":{backgroundColor:"rgb(217,83,79)",color:"#ffffff"},"panel-body":{}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{type:"default",title:"",paddingBody:20,paddingHead:20,dataClass:"",border:0}},ready:function(){}}}},function(t,e,n){var i=n(22),r=n(23),o=n(24);__weex_define__("@weex-component/wxc-tip",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){t.exports={type:"div",classList:function(){return["tip","tip-"+this.type]},children:[{type:"text",classList:function(){return["tip-txt","tip-txt-"+this.type]},attr:{value:function(){return this.value}}}]}},function(t,e){t.exports={tip:{paddingLeft:36,paddingRight:36,paddingTop:36,paddingBottom:36,borderRadius:10},"tip-txt":{fontSize:28},"tip-success":{backgroundColor:"#dff0d8",borderColor:"#d6e9c6"},"tip-txt-success":{color:"#3c763d"},"tip-info":{backgroundColor:"#d9edf7",borderColor:"#bce8f1"},"tip-txt-info":{color:"#31708f"},"tip-warning":{backgroundColor:"#fcf8e3",borderColor:"#faebcc"},"tip-txt-warning":{color:"#8a6d3b"},"tip-danger":{backgroundColor:"#f2dede",borderColor:"#ebccd1"},"tip-txt-danger":{color:"#a94442"}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{type:"success",value:""}}}}},function(t,e,n){var i=n(26),r=n(27),o=n(28);__weex_define__("@weex-component/wxc-countdown",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){t.exports={type:"div",style:{overflow:"hidden",flexDirection:"row"},events:{appear:"appeared",disappear:"disappeared"},children:[{type:"content"}]}},function(t,e){t.exports={wrap:{overflow:"hidden"}}},function(t,e,n){t.exports=function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(29),s=r(o);t.exports={data:function(){return{now:0,remain:0,time:{elapse:0,D:"0",DD:"0",h:"0",hh:"00",H:"0",HH:"0",m:"0",mm:"00",M:"0",MM:"0",s:"0",ss:"00",S:"0",SS:"0"},outofview:!1}},ready:function(){this.remain<=0||(this.now=Date.now(),this.nextTick())},methods:{nextTick:function(){this.outofview?setTimeout(this.nextTick.bind(this),1e3):(this.time.elapse=parseInt((Date.now()-this.now)/1e3),this.calc()?(this.$emit("tick",(0,s.default)({},this.time)),setTimeout(this.nextTick.bind(this),1e3)):this.$emit("alarm",(0,s.default)({},this.time)),this._app.updateActions())},format:function(t){return t.length>=2?t:"0"+t},calc:function(){var t=this.remain-this.time.elapse;return t<0&&(t=0),this.time.D=String(parseInt(t/86400)),this.time.DD=this.format(this.time.D),this.time.h=String(parseInt((t-86400*parseInt(this.time.D))/3600)),this.time.hh=this.format(this.time.h),this.time.H=String(parseInt(t/3600)),this.time.HH=this.format(this.time.H),this.time.m=String(parseInt((t-3600*parseInt(this.time.H))/60)),this.time.mm=this.format(this.time.m),this.time.M=String(parseInt(t/60)),this.time.MM=this.format(this.time.M),this.time.s=String(t-60*parseInt(this.time.M)),this.time.ss=this.format(this.time.s),this.time.S=String(t),this.time.SS=this.format(this.time.S),t>0},appeared:function(){this.outofview=!1},disappeared:function(){this.outofview=!0}}}}},function(t,e,n){t.exports={default:n(30),__esModule:!0}},function(t,e,n){n(31),t.exports=n(34).Object.assign},function(t,e,n){var i=n(32);i(i.S+i.F,"Object",{assign:n(47)})},function(t,e,n){var i=n(33),r=n(34),o=n(35),s=n(37),u="prototype",a=function(t,e,n){var c,f,l,d=t&a.F,p=t&a.G,h=t&a.S,g=t&a.P,m=t&a.B,x=t&a.W,b=p?r:r[e]||(r[e]={}),y=b[u],v=p?i:h?i[e]:(i[e]||{})[u];p&&(n=e);for(c in n)f=!d&&v&&void 0!==v[c],f&&c in b||(l=f?v[c]:n[c],b[c]=p&&"function"!=typeof v[c]?n[c]:m&&f?o(l,i):x&&v[c]==l?function(t){var e=function(e,n,i){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,i)}return t.apply(this,arguments)};return e[u]=t[u],e}(l):g&&"function"==typeof l?o(Function.call,l):l,g&&((b.virtual||(b.virtual={}))[c]=l,t&a.R&&y&&!y[c]&&s(y,c,l)))};a.F=1,a.G=2,a.S=4,a.P=8,a.B=16,a.W=32,a.U=64,a.R=128,t.exports=a},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){var n=t.exports={version:"2.4.0"};"number"==typeof __e&&(__e=n)},function(t,e,n){var i=n(36);t.exports=function(t,e,n){if(i(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,i){return t.call(e,n,i)};case 3:return function(n,i,r){return t.call(e,n,i,r)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){var i=n(38),r=n(46);t.exports=n(42)?function(t,e,n){return i.f(t,e,r(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var i=n(39),r=n(41),o=n(45),s=Object.defineProperty;e.f=n(42)?Object.defineProperty:function(t,e,n){if(i(t),e=o(e,!0),i(n),r)try{return s(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var i=n(40);t.exports=function(t){if(!i(t))throw TypeError(t+" is not an object!");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){t.exports=!n(42)&&!n(43)(function(){return 7!=Object.defineProperty(n(44)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){t.exports=!n(43)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var i=n(40),r=n(33).document,o=i(r)&&i(r.createElement);t.exports=function(t){return o?r.createElement(t):{}}},function(t,e,n){var i=n(40);t.exports=function(t,e){if(!i(t))return t;var n,r;if(e&&"function"==typeof(n=t.toString)&&!i(r=n.call(t)))return r;if("function"==typeof(n=t.valueOf)&&!i(r=n.call(t)))return r;if(!e&&"function"==typeof(n=t.toString)&&!i(r=n.call(t)))return r;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){"use strict";var i=n(48),r=n(63),o=n(64),s=n(65),u=n(52),a=Object.assign;t.exports=!a||n(43)(function(){var t={},e={},n=Symbol(),i="abcdefghijklmnopqrst";return t[n]=7,i.split("").forEach(function(t){e[t]=t}),7!=a({},t)[n]||Object.keys(a({},e)).join("")!=i})?function(t,e){for(var n=s(t),a=arguments.length,c=1,f=r.f,l=o.f;a>c;)for(var d,p=u(arguments[c++]),h=f?i(p).concat(f(p)):i(p),g=h.length,m=0;g>m;)l.call(p,d=h[m++])&&(n[d]=p[d]);return n}:a},function(t,e,n){var i=n(49),r=n(62);t.exports=Object.keys||function(t){return i(t,r)}},function(t,e,n){var i=n(50),r=n(51),o=n(55)(!1),s=n(59)("IE_PROTO");t.exports=function(t,e){var n,u=r(t),a=0,c=[];for(n in u)n!=s&&i(u,n)&&c.push(n);for(;e.length>a;)i(u,n=e[a++])&&(~o(c,n)||c.push(n));return c}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var i=n(52),r=n(54);t.exports=function(t){return i(r(t))}},function(t,e,n){var i=n(53);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==i(t)?t.split(""):Object(t)}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var i=n(51),r=n(56),o=n(58);t.exports=function(t){return function(e,n,s){var u,a=i(e),c=r(a.length),f=o(s,c);if(t&&n!=n){for(;c>f;)if(u=a[f++],u!=u)return!0}else for(;c>f;f++)if((t||f in a)&&a[f]===n)return t||f||0;return!t&&-1}}},function(t,e,n){var i=n(57),r=Math.min;t.exports=function(t){return t>0?r(i(t),9007199254740991):0}},function(t,e){var n=Math.ceil,i=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?i:n)(t)}},function(t,e,n){var i=n(57),r=Math.max,o=Math.min;t.exports=function(t,e){return t=i(t),t<0?r(t+e,0):o(t,e)}},function(t,e,n){var i=n(60)("keys"),r=n(61);t.exports=function(t){return i[t]||(i[t]=r(t))}},function(t,e,n){var i=n(33),r="__core-js_shared__",o=i[r]||(i[r]={});t.exports=function(t){return o[t]||(o[t]={})}},function(t,e){var n=0,i=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+i).toString(36))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){var i=n(54);t.exports=function(t){return Object(i(t))}},function(t,e,n){var i=n(67),r=n(68),o=n(69);__weex_define__("@weex-component/wxc-marquee",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){t.exports={type:"div",classList:["wrap"],events:{appear:"appeared",disappear:"disappeared"},children:[{type:"div",id:"anim",classList:["anim"],children:[{type:"content"}]}]}},function(t,e){t.exports={wrap:{overflow:"hidden",position:"relative"},anim:{flexDirection:"column",position:"absolute",transform:"translateY(0) translateZ(0)"}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{step:0,count:0,index:1,duration:0,interval:0,outofview:!1}},ready:function(){this.interval>0&&this.step>0&&this.duration>0&&this.nextTick()},methods:{nextTick:function(){var t=this;this.outofview?setTimeout(t.nextTick.bind(t),t.interval):setTimeout(function(){t.animation(t.nextTick.bind(t))},t.interval)},animation:function(t){var e=this,i=-e.step*e.index,r=n("@weex-module/animation");r.transition(this.$el("anim"),{styles:{transform:"translateY("+String(i)+"px) translateZ(0)"},timingFunction:"ease",duration:e.duration},function(){e.index=(e.index+1)%e.count,e.$emit("change",{index:e.index,count:e.count}),t&&t()})},appeared:function(){this.outofview=!1},disappeared:function(){this.outofview=!0}}}}},function(t,e,n){var i=n(71),r=n(72),o=n(73);__weex_define__("@weex-component/wxc-navbar",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){t.exports={type:"div",classList:["container"],style:{height:function(){return this.height},backgroundColor:function(){return this.backgroundColor}},attr:{dataRole:function(){return this.dataRole}},children:[{type:"text",classList:["right-text"],style:{color:function(){return this.rightItemColor}},attr:{naviItemPosition:"right",value:function(){return this.rightItemTitle}},shown:function(){return!this.rightItemSrc},events:{click:"onclickrightitem"}},{type:"image",classList:["right-image"],attr:{naviItemPosition:"right",src:function(){return this.rightItemSrc}},shown:function(){return this.rightItemSrc},events:{click:"onclickrightitem"}},{type:"text",classList:["left-text"],style:{color:function(){return this.leftItemColor}},attr:{naviItemPosition:"left",value:function(){return this.leftItemTitle}},shown:function(){return!this.leftItemSrc},events:{click:"onclickleftitem"}},{type:"image",classList:["left-image"],attr:{naviItemPosition:"left",src:function(){return this.leftItemSrc}},shown:function(){return this.leftItemSrc},events:{click:"onclickleftitem"}},{type:"text",classList:["center-text"],style:{color:function(){return this.titleColor}},attr:{naviItemPosition:"center",value:function(){return this.title}}}]}},function(t,e){t.exports={container:{flexDirection:"row",position:"fixed",top:0,left:0,right:0,width:750},"right-text":{position:"absolute",bottom:28,right:32,textAlign:"right",fontSize:32,fontFamily:"'Open Sans', sans-serif"},"left-text":{position:"absolute",bottom:28,left:32,textAlign:"left",fontSize:32,fontFamily:"'Open Sans', sans-serif"},"center-text":{position:"absolute",bottom:25,left:172,right:172,textAlign:"center",fontSize:36,fontWeight:"bold"},"left-image":{position:"absolute",bottom:20,left:28,width:50,height:50},"right-image":{position:"absolute",bottom:20,right:28,width:50,height:50}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{dataRole:"navbar",backgroundColor:"black",height:88,title:"",titleColor:"black",rightItemSrc:"",rightItemTitle:"",rightItemColor:"black",leftItemSrc:"",leftItemTitle:"",leftItemColor:"black"}},methods:{onclickrightitem:function(t){this.$dispatch("naviBar.rightItem.click",{})},onclickleftitem:function(t){this.$dispatch("naviBar.leftItem.click",{})}}}}},function(t,e,n){n(70);var i=n(75),r=n(76),o=n(77);__weex_define__("@weex-component/wxc-navpage",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){t.exports={type:"div",classList:["wrapper"],children:[{type:"wxc-navbar",attr:{dataRole:function(){return this.dataRole},height:function(){return this.height},backgroundColor:function(){return this.backgroundColor},title:function(){return this.title},titleColor:function(){return this.titleColor},leftItemSrc:function(){return this.leftItemSrc},leftItemTitle:function(){return this.leftItemTitle},leftItemColor:function(){return this.leftItemColor},rightItemSrc:function(){return this.rightItemSrc},rightItemTitle:function(){return this.rightItemTitle},rightItemColor:function(){return this.rightItemColor}}},{type:"div",classList:["wrapper"],style:{marginTop:function(){return this.height}},children:[{type:"content"}]}]}},function(t,e){t.exports={wrapper:{position:"absolute",top:0,left:0,right:0,bottom:0,width:750}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{dataRole:"navbar",backgroundColor:"black",height:88,title:"",titleColor:"black",rightItemSrc:"",rightItemTitle:"",rightItemColor:"black",leftItemSrc:"",leftItemTitle:"",leftItemColor:"black"}}}}},function(t,e,n){n(79);var i=n(83),r=n(84),o=n(85);__weex_define__("@weex-component/wxc-tabbar",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e,n){var i=n(80),r=n(81),o=n(82);__weex_define__("@weex-component/wxc-tabitem",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){t.exports={type:"div",classList:["container"],style:{backgroundColor:function(){return this.backgroundColor}},events:{click:"onclickitem"},children:[{type:"image",classList:["top-line"],attr:{src:"http://gtms03.alicdn.com/tps/i3/TB1mdsiMpXXXXXpXXXXNw4JIXXX-640-4.png"}},{type:"image",classList:["tab-icon"],attr:{src:function(){return this.icon}}},{type:"text",classList:["tab-text"],style:{color:function(){return this.titleColor}},attr:{value:function(){return this.title}}}]}},function(t,e){t.exports={container:{flex:1,flexDirection:"column",alignItems:"center",justifyContent:"center",height:88},"top-line":{position:"absolute",top:0,left:0,right:0,height:2},"tab-icon":{marginTop:5,width:40,height:40},"tab-text":{marginTop:5,textAlign:"center",fontSize:20}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{index:0,title:"",titleColor:"#000000",icon:"",backgroundColor:"#ffffff"}},methods:{onclickitem:function(t){var e=this,n={index:e.index};e.$dispatch("tabItem.onClick",n)}}}}},function(t,e){t.exports={type:"div",classList:["wrapper"],children:[{type:"embed",classList:["content"],style:{visibility:function(){return this.visibility}},repeat:function(){return this.tabItems},attr:{src:function(){return this.src},type:"weex"}},{type:"div",classList:["tabbar"],append:"tree",children:[{type:"wxc-tabitem",repeat:function(){return this.tabItems},attr:{index:function(){return this.index},icon:function(){return this.icon},title:function(){return this.title},titleColor:function(){return this.titleColor}}}]}]}},function(t,e){t.exports={wrapper:{width:750,position:"absolute",top:0,left:0,right:0,bottom:0},content:{position:"absolute",top:0,left:0,right:0,bottom:0,marginTop:0,marginBottom:88},tabbar:{flexDirection:"row",position:"fixed",bottom:0,left:0,right:0,height:88}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{tabItems:[],selectedIndex:0,selectedColor:"#ff0000",unselectedColor:"#000000"}},created:function(){this.selected(this.selectedIndex),this.$on("tabItem.onClick",function(t){var e=t.detail;this.selectedIndex=e.index,this.selected(e.index);var n={index:e.index};this.$dispatch("tabBar.onClick",n)})},methods:{selected:function(t){for(var e=0;e<this.tabItems.length;e++){var n=this.tabItems[e];e==t?(n.icon=n.selectedImage,n.titleColor=this.selectedColor,n.visibility="visible"):(n.icon=n.image,n.titleColor=this.unselectedColor,n.visibility="hidden")}}}}}},,,,,function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{default:t}}function r(t,e){o.sendHttp({method:"GET",url:t},function(t){var n=JSON.parse(t);e(n)})}var o,s=n(91),u=i(s);__weex_define__("@weex-temp/api",function(t){o=t("@weex-module/stream")});var a={zhihuBaseurl:"http://zhihuhu.duapp.com",zhihuArticles:"/api-statis/articles/",zhihuArticle:"/article/",zhihuYear:"/api-statis/year/",zhihuMouth:"/api-statis/month",baseurl:"http://v3.wufazhuce.com:8000/api",homePage:"/hp/bymonth/",readingCarousel:"/reading/carousel",readingIndex:"/reading/index/",essay:"/essay/",serialcontent:"/serialcontent/",question:"/question/",carouselList:"/reading/carousel/",movieList:"/movie/list/",movieDetail:"/movie/detail/"};e.getHome=function(t,e){r(a.baseurl+a.homePage+t,e)},e.getZhihuArticles=function(t,e){r(a.zhihuBaseurl+a.zhihuArticles+t,e)},e.getZhihuArticle=function(t,e){r(a.zhihuBaseurl+a.zhihuArticle+t,e)},e.getZhihuYear=function(t,e){r(a.zhihuBaseurl+a.zhihuYear+t,e)},e.getZhihuMonth=function(t,e){r(a.zhihuBaseurl+a.zhihuMouth+t,e)},e.getReadingCarousel=function(t){r(a.baseurl+a.readingCarousel,t)},e.getReadingIndex=function(t,e){r(a.baseurl+a.readingIndex+t,e)},e.getEssay=function(t,e){r(a.baseurl+a.essay+t,e)},e.getSerialContent=function(t,e){r(a.baseurl+a.serialcontent+t,e)},e.getQuestionDetail=function(t,e){r(a.baseurl+a.question+t,e)},e.getCarouseList=function(t,e){r(a.baseurl+a.carouselList+t,e)},e.getMovieList=function(t,e){r(a.baseurl+a.movieList+t,e)},e.getMovieDetail=function(t,e){r(a.baseurl+a.movieDetail+t,e)},e.getZhihuList=function(t,e){r(a.baseurl+a.movieList+t,e)},e.getZhihuDetail=function(t,e){r(a.baseurl+a.movieDetail+t,e)},e.getBaseUrl=function(t,e){t=new String(t);var n,i=t.indexOf("file://assets/")>=0,r=t.indexOf("file:///")>=0&&t.indexOf("WeexDemo.app")>0;if(i)n="file://assets/dist/";else if(r)n=t.substring(0,t.lastIndexOf("/")+1);else{var o="localhost:8080",s=/\/\/([^\/]+?)\//.exec(t);s&&s.length>=2&&(o=s[1]),n="object"===("undefined"==typeof window?"undefined":(0,u.default)(window))?e?"http://"+o+"/index.html?page=./dist/":"/dist/":"http://"+o+"/dist/"}return n}},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{default:t}}e.__esModule=!0;var r=n(92),o=i(r),s=n(112),u=i(s),a="function"==typeof u.default&&"symbol"==typeof o.default?function(t){return typeof t}:function(t){return t&&"function"==typeof u.default&&t.constructor===u.default&&t!==u.default.prototype?"symbol":typeof t};e.default="function"==typeof u.default&&"symbol"===a(o.default)?function(t){return"undefined"==typeof t?"undefined":a(t)}:function(t){return t&&"function"==typeof u.default&&t.constructor===u.default&&t!==u.default.prototype?"symbol":"undefined"==typeof t?"undefined":a(t)}},function(t,e,n){t.exports={default:n(93),__esModule:!0}},function(t,e,n){n(94),n(107),t.exports=n(111).f("iterator")},function(t,e,n){"use strict";var i=n(95)(!0);n(96)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=i(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e,n){var i=n(57),r=n(54);t.exports=function(t){return function(e,n){var o,s,u=String(r(e)),a=i(n),c=u.length;return a<0||a>=c?t?"":void 0:(o=u.charCodeAt(a),o<55296||o>56319||a+1===c||(s=u.charCodeAt(a+1))<56320||s>57343?t?u.charAt(a):o:t?u.slice(a,a+2):(o-55296<<10)+(s-56320)+65536)}}},function(t,e,n){"use strict";var i=n(97),r=n(32),o=n(98),s=n(37),u=n(50),a=n(99),c=n(100),f=n(104),l=n(106),d=n(105)("iterator"),p=!([].keys&&"next"in[].keys()),h="@@iterator",g="keys",m="values",x=function(){return this};t.exports=function(t,e,n,b,y,v,_){c(n,e,b);var w,C,S,k=function(t){if(!p&&t in T)return T[t];switch(t){case g:return function(){return new n(this,t)};case m:return function(){return new n(this,t)}}return function(){return new n(this,t)}},I=e+" Iterator",O=y==m,L=!1,T=t.prototype,M=T[d]||T[h]||y&&T[y],j=M||k(y),z=y?O?k("entries"):j:void 0,B="Array"==e?T.entries||M:M;if(B&&(S=l(B.call(new t)),S!==Object.prototype&&(f(S,I,!0),i||u(S,d)||s(S,d,x))),O&&M&&M.name!==m&&(L=!0,j=function(){return M.call(this)}),i&&!_||!p&&!L&&T[d]||s(T,d,j),a[e]=j,a[I]=x,y)if(w={values:O?j:k(m),keys:v?j:k(g),entries:z},_)for(C in w)C in T||o(T,C,w[C]);else r(r.P+r.F*(p||L),e,w);return w}},function(t,e){t.exports=!0},function(t,e,n){t.exports=n(37)},function(t,e){t.exports={}},function(t,e,n){"use strict";var i=n(101),r=n(46),o=n(104),s={};n(37)(s,n(105)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=i(s,{next:r(1,n)}),o(t,e+" Iterator")}},function(t,e,n){var i=n(39),r=n(102),o=n(62),s=n(59)("IE_PROTO"),u=function(){},a="prototype",c=function(){var t,e=n(44)("iframe"),i=o.length,r="<",s=">";for(e.style.display="none",n(103).appendChild(e),e.src="javascript:",t=e.contentWindow.document,t.open(),t.write(r+"script"+s+"document.F=Object"+r+"/script"+s),t.close(),c=t.F;i--;)delete c[a][o[i]];return c()};t.exports=Object.create||function(t,e){var n;return null!==t?(u[a]=i(t),n=new u,u[a]=null,n[s]=t):n=c(),void 0===e?n:r(n,e)}},function(t,e,n){var i=n(38),r=n(39),o=n(48);t.exports=n(42)?Object.defineProperties:function(t,e){r(t);for(var n,s=o(e),u=s.length,a=0;u>a;)i.f(t,n=s[a++],e[n]);return t}},function(t,e,n){t.exports=n(33).document&&document.documentElement},function(t,e,n){var i=n(38).f,r=n(50),o=n(105)("toStringTag");t.exports=function(t,e,n){t&&!r(t=n?t:t.prototype,o)&&i(t,o,{configurable:!0,value:e})}},function(t,e,n){var i=n(60)("wks"),r=n(61),o=n(33).Symbol,s="function"==typeof o,u=t.exports=function(t){return i[t]||(i[t]=s&&o[t]||(s?o:r)("Symbol."+t))};u.store=i},function(t,e,n){var i=n(50),r=n(65),o=n(59)("IE_PROTO"),s=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=r(t),i(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?s:null}},function(t,e,n){n(108);for(var i=n(33),r=n(37),o=n(99),s=n(105)("toStringTag"),u=["NodeList","DOMTokenList","MediaList","StyleSheetList","CSSRuleList"],a=0;a<5;a++){var c=u[a],f=i[c],l=f&&f.prototype;l&&!l[s]&&r(l,s,c),o[c]=o.Array}},function(t,e,n){"use strict";var i=n(109),r=n(110),o=n(99),s=n(51);t.exports=n(96)(Array,"Array",function(t,e){this._t=s(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,r(1)):"keys"==e?r(0,n):"values"==e?r(0,t[n]):r(0,[n,t[n]])},"values"),o.Arguments=o.Array,i("keys"),i("values"),i("entries")},function(t,e){t.exports=function(){}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){e.f=n(105)},function(t,e,n){t.exports={default:n(113),__esModule:!0}},function(t,e,n){n(114),n(123),n(124),n(125),t.exports=n(34).Symbol},function(t,e,n){"use strict";var i=n(33),r=n(50),o=n(42),s=n(32),u=n(98),a=n(115).KEY,c=n(43),f=n(60),l=n(104),d=n(61),p=n(105),h=n(111),g=n(116),m=n(117),x=n(118),b=n(119),y=n(39),v=n(51),_=n(45),w=n(46),C=n(101),S=n(120),k=n(122),I=n(38),O=n(48),L=k.f,T=I.f,M=S.f,j=i.Symbol,z=i.JSON,B=z&&z.stringify,P="prototype",E=p("_hidden"),D=p("toPrimitive"),R={}.propertyIsEnumerable,A=f("symbol-registry"),F=f("symbols"),N=f("op-symbols"),H=Object[P],W="function"==typeof j,$=i.QObject,q=!$||!$[P]||!$[P].findChild,X=o&&c(function(){return 7!=C(T({},"a",{get:function(){return T(this,"a",{value:7}).a}})).a})?function(t,e,n){var i=L(H,e);i&&delete H[e],T(t,e,n),i&&t!==H&&T(H,e,i)}:T,Z=function(t){var e=F[t]=C(j[P]);return e._k=t,e},Y=W&&"symbol"==typeof j.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof j},J=function(t,e,n){return t===H&&J(N,e,n),y(t),e=_(e,!0),y(n),r(F,e)?(n.enumerable?(r(t,E)&&t[E][e]&&(t[E][e]=!1),n=C(n,{enumerable:w(0,!1)})):(r(t,E)||T(t,E,w(1,{})),t[E][e]=!0),X(t,e,n)):T(t,e,n)},G=function(t,e){y(t);for(var n,i=x(e=v(e)),r=0,o=i.length;o>r;)J(t,n=i[r++],e[n]);return t},U=function(t,e){return void 0===e?C(t):G(C(t),e)},K=function(t){var e=R.call(this,t=_(t,!0));return!(this===H&&r(F,t)&&!r(N,t))&&(!(e||!r(this,t)||!r(F,t)||r(this,E)&&this[E][t])||e)},Q=function(t,e){if(t=v(t),e=_(e,!0),t!==H||!r(F,e)||r(N,e)){var n=L(t,e);return!n||!r(F,e)||r(t,E)&&t[E][e]||(n.enumerable=!0),n}},V=function(t){for(var e,n=M(v(t)),i=[],o=0;n.length>o;)r(F,e=n[o++])||e==E||e==a||i.push(e);return i},tt=function(t){for(var e,n=t===H,i=M(n?N:v(t)),o=[],s=0;i.length>s;)!r(F,e=i[s++])||n&&!r(H,e)||o.push(F[e]);return o};W||(j=function(){if(this instanceof j)throw TypeError("Symbol is not a constructor!");var t=d(arguments.length>0?arguments[0]:void 0),e=function(n){this===H&&e.call(N,n),r(this,E)&&r(this[E],t)&&(this[E][t]=!1),X(this,t,w(1,n))};return o&&q&&X(H,t,{configurable:!0,set:e}),Z(t)},u(j[P],"toString",function(){return this._k}),k.f=Q,I.f=J,n(121).f=S.f=V,n(64).f=K,n(63).f=tt,o&&!n(97)&&u(H,"propertyIsEnumerable",K,!0),h.f=function(t){return Z(p(t))}),s(s.G+s.W+s.F*!W,{Symbol:j});for(var et="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),nt=0;et.length>nt;)p(et[nt++]);for(var et=O(p.store),nt=0;et.length>nt;)g(et[nt++]);s(s.S+s.F*!W,"Symbol",{for:function(t){return r(A,t+="")?A[t]:A[t]=j(t)},keyFor:function(t){if(Y(t))return m(A,t);throw TypeError(t+" is not a symbol!")},useSetter:function(){q=!0},useSimple:function(){q=!1}}),s(s.S+s.F*!W,"Object",{
create:U,defineProperty:J,defineProperties:G,getOwnPropertyDescriptor:Q,getOwnPropertyNames:V,getOwnPropertySymbols:tt}),z&&s(s.S+s.F*(!W||c(function(){var t=j();return"[null]"!=B([t])||"{}"!=B({a:t})||"{}"!=B(Object(t))})),"JSON",{stringify:function(t){if(void 0!==t&&!Y(t)){for(var e,n,i=[t],r=1;arguments.length>r;)i.push(arguments[r++]);return e=i[1],"function"==typeof e&&(n=e),!n&&b(e)||(e=function(t,e){if(n&&(e=n.call(this,t,e)),!Y(e))return e}),i[1]=e,B.apply(z,i)}}}),j[P][D]||n(37)(j[P],D,j[P].valueOf),l(j,"Symbol"),l(Math,"Math",!0),l(i.JSON,"JSON",!0)},function(t,e,n){var i=n(61)("meta"),r=n(40),o=n(50),s=n(38).f,u=0,a=Object.isExtensible||function(){return!0},c=!n(43)(function(){return a(Object.preventExtensions({}))}),f=function(t){s(t,i,{value:{i:"O"+ ++u,w:{}}})},l=function(t,e){if(!r(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,i)){if(!a(t))return"F";if(!e)return"E";f(t)}return t[i].i},d=function(t,e){if(!o(t,i)){if(!a(t))return!0;if(!e)return!1;f(t)}return t[i].w},p=function(t){return c&&h.NEED&&a(t)&&!o(t,i)&&f(t),t},h=t.exports={KEY:i,NEED:!1,fastKey:l,getWeak:d,onFreeze:p}},function(t,e,n){var i=n(33),r=n(34),o=n(97),s=n(111),u=n(38).f;t.exports=function(t){var e=r.Symbol||(r.Symbol=o?{}:i.Symbol||{});"_"==t.charAt(0)||t in e||u(e,t,{value:s.f(t)})}},function(t,e,n){var i=n(48),r=n(51);t.exports=function(t,e){for(var n,o=r(t),s=i(o),u=s.length,a=0;u>a;)if(o[n=s[a++]]===e)return n}},function(t,e,n){var i=n(48),r=n(63),o=n(64);t.exports=function(t){var e=i(t),n=r.f;if(n)for(var s,u=n(t),a=o.f,c=0;u.length>c;)a.call(t,s=u[c++])&&e.push(s);return e}},function(t,e,n){var i=n(53);t.exports=Array.isArray||function(t){return"Array"==i(t)}},function(t,e,n){var i=n(51),r=n(121).f,o={}.toString,s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],u=function(t){try{return r(t)}catch(t){return s.slice()}};t.exports.f=function(t){return s&&"[object Window]"==o.call(t)?u(t):r(i(t))}},function(t,e,n){var i=n(49),r=n(62).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return i(t,r)}},function(t,e,n){var i=n(64),r=n(46),o=n(51),s=n(45),u=n(50),a=n(41),c=Object.getOwnPropertyDescriptor;e.f=n(42)?c:function(t,e){if(t=o(t),e=s(e,!0),a)try{return c(t,e)}catch(t){}if(u(t,e))return r(!i.f.call(t,e),t[e])}},function(t,e){},function(t,e,n){n(116)("asyncIterator")},function(t,e,n){n(116)("observable")},function(t,e,n){var i=n(127),r=n(128),o=n(129);__weex_define__("@weex-component/nav-bar-normal",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){t.exports={type:"div",children:[{type:"div",classList:["nav_bar"],children:[{type:"div",style:{flex:1},children:[{type:"image",style:{width:99,height:99},shown:function(){return this.showback},events:{click:"onBackClick"},attr:{src:"https://github.com/dodola/WeexOne/raw/master/imgs/return_image.png"}}]},{type:"div",classList:["nav_title"],children:[{type:"text",classList:["text-type"],attr:{value:function(){return this.title}}}]},{type:"div",style:{flex:1}}]},{type:"div",classList:["separate-item-text"]}]}},function(t,e){t.exports={"text-type":{color:"#29a7e2",marginLeft:10},nav_bar:{flexDirection:"row",marginBottom:10,height:99},nav_logo:{width:75,height:30},nav_title:{flex:1,justifyContent:"center",alignItems:"center",flexDirection:"row"},"separate-item-text":{height:1,backgroundColor:"#d4d4d4"}}},function(t,e,n){t.exports=function(t,e,i){"use strict";n(4);i("@weex-module/modal");t.exports={data:function(){return{title:"阅读",justifyContent:"center",showback:!1}},created:function(){},methods:{onBackClick:function(t){this.$dispatch("onbackclick",{})}}}}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e){t.exports={type:"div",children:[{type:"nav-bar-normal",attr:{showback:"true"}},{type:"scroller",classList:["scroll"],children:[{type:"div",classList:["scroll-content"],children:[{type:"text",classList:["text-title"],attr:{value:function(){return this.question_title}}},{type:"text",classList:["text-content"],attr:{value:function(){return this.question_title}}},{type:"div",classList:["separate-line"]},{type:"text",classList:["text-title"],attr:{value:function(){return this.answer_title}}},{type:"text",classList:["text-content"],attr:{value:function(){return this.answer_content}}}]}]}]}},function(t,e){t.exports={scroll:{},"scroll-content":{paddingLeft:30,paddingRight:30},"separate-line":{backgroundColor:"#d4d4d4",height:1,marginTop:30,marginBottom:20},"text-title":{color:"#000000",fontSize:40,marginTop:26,fontWeight:"bold"},"text-content":{color:"#333333",marginTop:28}}},function(t,e,n){t.exports=function(t,e,i){"use strict";n(4);var r=(i("@weex-module/modal"),i("@weex-module/navigator")),o=n(90);t.exports={data:function(){return{question_content:"",answer_content:"",answer_title:"",question_title:""}},created:function(){var t=this,e=this.$getConfig().bundleUrl,n=t.getParameterByName("id",e);n.lastIndexOf("?")!=-1&&(n=n.substr(0,n.lastIndexOf("?"))),o.getQuestionDetail(n,function(e){t.question_content=e.data.question_content,t.answer_title=e.data.answer_title,t.answer_content=e.data.answer_content,t.question_title=e.data.question_title}),this.$on("onbackclick",function(t){var e={animated:"true"};r.pop(e,function(t){})})},methods:{getParameterByName:function(t,e){t=t.replace(/[\[\]]/g,"\\$&");var n=new RegExp("[?&]"+t+"(=([^&#]*)|&|#|$)"),i=n.exec(e);return i?i[2]?decodeURIComponent(i[2].replace(/\+/g," ")):"":null}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,