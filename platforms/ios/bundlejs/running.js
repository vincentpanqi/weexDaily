!function(t){function e(i){if(n[i])return n[i].exports;var r=n[i]={exports:{},id:i,loaded:!1};return t[i].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){var i=n(183),r=n(184),o=n(185);__weex_define__("@weex-component/33d213ae1c7dedf0e9fbbab44c74105d",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r}),__weex_bootstrap__("@weex-component/33d213ae1c7dedf0e9fbbab44c74105d",void 0,void 0)},,,,function(t,e,n){n(5),n(9),n(13),n(17),n(21),n(25),n(66),n(70),n(74),n(78),n(79)},function(t,e,n){var i=n(6),r=n(7),o=n(8);__weex_define__("@weex-component/wxc-button",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){t.exports={type:"div",classList:function(){return["btn","btn-"+this.type,"btn-sz-"+this.size]},children:[{type:"text",classList:function(){return["btn-txt","btn-txt-"+this.type,"btn-txt-sz-"+this.size]},attr:{value:function(){return this.value}}}]}},function(t,e){t.exports={btn:{marginBottom:0,alignItems:"center",justifyContent:"center",borderWidth:1,borderStyle:"solid",borderColor:"#333333"},"btn-default":{color:"rgb(51,51,51)"},"btn-primary":{backgroundColor:"rgb(40,96,144)",borderColor:"rgb(40,96,144)"},"btn-success":{backgroundColor:"rgb(92,184,92)",borderColor:"rgb(76,174,76)"},"btn-info":{backgroundColor:"rgb(91,192,222)",borderColor:"rgb(70,184,218)"},"btn-warning":{backgroundColor:"rgb(240,173,78)",borderColor:"rgb(238,162,54)"},"btn-danger":{backgroundColor:"rgb(217,83,79)",borderColor:"rgb(212,63,58)"},"btn-link":{borderColor:"rgba(0,0,0,0)",borderRadius:0},"btn-txt-default":{color:"rgb(51,51,51)"},"btn-txt-primary":{color:"rgb(255,255,255)"},"btn-txt-success":{color:"rgb(255,255,255)"},"btn-txt-info":{color:"rgb(255,255,255)"},"btn-txt-warning":{color:"rgb(255,255,255)"},"btn-txt-danger":{color:"rgb(255,255,255)"},"btn-txt-link":{color:"rgb(51,122,183)"},"btn-sz-large":{width:300,height:100,paddingTop:25,paddingBottom:25,paddingLeft:40,paddingRight:40,borderRadius:15},"btn-sz-middle":{width:240,height:80,paddingTop:15,paddingBottom:15,paddingLeft:30,paddingRight:30,borderRadius:10},"btn-sz-small":{width:170,height:60,paddingTop:12,paddingBottom:12,paddingLeft:25,paddingRight:25,borderRadius:7},"btn-txt-sz-large":{fontSize:45},"btn-txt-sz-middle":{fontSize:35},"btn-txt-sz-small":{fontSize:30}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{type:"default",size:"large",value:""}},methods:{}}}},function(t,e,n){var i=n(10),r=n(11),o=n(12);__weex_define__("@weex-component/wxc-hn",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){t.exports={type:"div",classList:function(){return["h"+this.level]},style:{justifyContent:"center"},children:[{type:"text",classList:function(){return["txt-h"+this.level]},attr:{value:function(){return this.value}}}]}},function(t,e){t.exports={h1:{height:110,paddingTop:20,paddingBottom:20},h2:{height:110,paddingTop:20,paddingBottom:20},h3:{height:110,paddingTop:20,paddingBottom:20},"txt-h1":{fontSize:70},"txt-h2":{fontSize:52},"txt-h3":{fontSize:42}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{level:1,value:""}},methods:{}}}},function(t,e,n){var i=n(14),r=n(15),o=n(16);__weex_define__("@weex-component/wxc-list-item",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){t.exports={type:"div",classList:["item"],events:{touchstart:"touchstart",touchend:"touchend"},style:{backgroundColor:function(){return this.bgColor}},children:[{type:"content"}]}},function(t,e){t.exports={item:{paddingTop:25,paddingBottom:25,paddingLeft:35,paddingRight:35,height:160,justifyContent:"center",borderBottomWidth:1,borderColor:"#dddddd"}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{bgColor:"#ffffff"}},methods:{touchstart:function(){},touchend:function(){}}}}},function(t,e,n){var i=n(18),r=n(19),o=n(20);__weex_define__("@weex-component/wxc-panel",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){t.exports={type:"div",classList:function(){return["panel","panel-"+this.type]},style:{borderWidth:function(){return this.border}},children:[{type:"text",classList:function(){return["panel-header","panel-header-"+this.type]},style:{paddingTop:function(){return this.paddingHead},paddingBottom:function(){return this.paddingHead},paddingLeft:function(){return 1.5*this.paddingHead},paddingRight:function(){return 1.5*this.paddingHead}},attr:{value:function(){return this.title}}},{type:"div",classList:function(){return["panel-body","panel-body-"+this.type]},style:{paddingTop:function(){return this.paddingBody},paddingBottom:function(){return this.paddingBody},paddingLeft:function(){return 1.5*this.paddingBody},paddingRight:function(){return 1.5*this.paddingBody}},children:[{type:"content"}]}]}},function(t,e){t.exports={panel:{marginBottom:20,backgroundColor:"#ffffff",borderColor:"#dddddd",borderWidth:1},"panel-primary":{borderColor:"rgb(40,96,144)"},"panel-success":{borderColor:"rgb(76,174,76)"},"panel-info":{borderColor:"rgb(70,184,218)"},"panel-warning":{borderColor:"rgb(238,162,54)"},"panel-danger":{borderColor:"rgb(212,63,58)"},"panel-header":{backgroundColor:"#f5f5f5",fontSize:40,color:"#333333"},"panel-header-primary":{backgroundColor:"rgb(40,96,144)",color:"#ffffff"},"panel-header-success":{backgroundColor:"rgb(92,184,92)",color:"#ffffff"},"panel-header-info":{backgroundColor:"rgb(91,192,222)",color:"#ffffff"},"panel-header-warning":{backgroundColor:"rgb(240,173,78)",color:"#ffffff"},"panel-header-danger":{backgroundColor:"rgb(217,83,79)",color:"#ffffff"},"panel-body":{}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{type:"default",title:"",paddingBody:20,paddingHead:20,dataClass:"",border:0}},ready:function(){}}}},function(t,e,n){var i=n(22),r=n(23),o=n(24);__weex_define__("@weex-component/wxc-tip",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){t.exports={type:"div",classList:function(){return["tip","tip-"+this.type]},children:[{type:"text",classList:function(){return["tip-txt","tip-txt-"+this.type]},attr:{value:function(){return this.value}}}]}},function(t,e){t.exports={tip:{paddingLeft:36,paddingRight:36,paddingTop:36,paddingBottom:36,borderRadius:10},"tip-txt":{fontSize:28},"tip-success":{backgroundColor:"#dff0d8",borderColor:"#d6e9c6"},"tip-txt-success":{color:"#3c763d"},"tip-info":{backgroundColor:"#d9edf7",borderColor:"#bce8f1"},"tip-txt-info":{color:"#31708f"},"tip-warning":{backgroundColor:"#fcf8e3",borderColor:"#faebcc"},"tip-txt-warning":{color:"#8a6d3b"},"tip-danger":{backgroundColor:"#f2dede",borderColor:"#ebccd1"},"tip-txt-danger":{color:"#a94442"}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{type:"success",value:""}}}}},function(t,e,n){var i=n(26),r=n(27),o=n(28);__weex_define__("@weex-component/wxc-countdown",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){t.exports={type:"div",style:{overflow:"hidden",flexDirection:"row"},events:{appear:"appeared",disappear:"disappeared"},children:[{type:"content"}]}},function(t,e){t.exports={wrap:{overflow:"hidden"}}},function(t,e,n){t.exports=function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(29),s=r(o);t.exports={data:function(){return{now:0,remain:0,time:{elapse:0,D:"0",DD:"0",h:"0",hh:"00",H:"0",HH:"0",m:"0",mm:"00",M:"0",MM:"0",s:"0",ss:"00",S:"0",SS:"0"},outofview:!1}},ready:function(){this.remain<=0||(this.now=Date.now(),this.nextTick())},methods:{nextTick:function(){this.outofview?setTimeout(this.nextTick.bind(this),1e3):(this.time.elapse=parseInt((Date.now()-this.now)/1e3),this.calc()?(this.$emit("tick",(0,s.default)({},this.time)),setTimeout(this.nextTick.bind(this),1e3)):this.$emit("alarm",(0,s.default)({},this.time)),this._app.updateActions())},format:function(t){return t.length>=2?t:"0"+t},calc:function(){var t=this.remain-this.time.elapse;return t<0&&(t=0),this.time.D=String(parseInt(t/86400)),this.time.DD=this.format(this.time.D),this.time.h=String(parseInt((t-86400*parseInt(this.time.D))/3600)),this.time.hh=this.format(this.time.h),this.time.H=String(parseInt(t/3600)),this.time.HH=this.format(this.time.H),this.time.m=String(parseInt((t-3600*parseInt(this.time.H))/60)),this.time.mm=this.format(this.time.m),this.time.M=String(parseInt(t/60)),this.time.MM=this.format(this.time.M),this.time.s=String(t-60*parseInt(this.time.M)),this.time.ss=this.format(this.time.s),this.time.S=String(t),this.time.SS=this.format(this.time.S),t>0},appeared:function(){this.outofview=!1},disappeared:function(){this.outofview=!0}}}}},function(t,e,n){t.exports={default:n(30),__esModule:!0}},function(t,e,n){n(31),t.exports=n(34).Object.assign},function(t,e,n){var i=n(32);i(i.S+i.F,"Object",{assign:n(47)})},function(t,e,n){var i=n(33),r=n(34),o=n(35),s=n(37),a="prototype",c=function(t,e,n){var u,l,f,d=t&c.F,p=t&c.G,h=t&c.S,g=t&c.P,m=t&c.B,x=t&c.W,b=p?r:r[e]||(r[e]={}),v=b[a],y=p?i:h?i[e]:(i[e]||{})[a];p&&(n=e);for(u in n)l=!d&&y&&void 0!==y[u],l&&u in b||(f=l?y[u]:n[u],b[u]=p&&"function"!=typeof y[u]?n[u]:m&&l?o(f,i):x&&y[u]==f?function(t){var e=function(e,n,i){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,i)}return t.apply(this,arguments)};return e[a]=t[a],e}(f):g&&"function"==typeof f?o(Function.call,f):f,g&&((b.virtual||(b.virtual={}))[u]=f,t&c.R&&v&&!v[u]&&s(v,u,f)))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){var n=t.exports={version:"2.4.0"};"number"==typeof __e&&(__e=n)},function(t,e,n){var i=n(36);t.exports=function(t,e,n){if(i(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,i){return t.call(e,n,i)};case 3:return function(n,i,r){return t.call(e,n,i,r)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){var i=n(38),r=n(46);t.exports=n(42)?function(t,e,n){return i.f(t,e,r(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var i=n(39),r=n(41),o=n(45),s=Object.defineProperty;e.f=n(42)?Object.defineProperty:function(t,e,n){if(i(t),e=o(e,!0),i(n),r)try{return s(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var i=n(40);t.exports=function(t){if(!i(t))throw TypeError(t+" is not an object!");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){t.exports=!n(42)&&!n(43)(function(){return 7!=Object.defineProperty(n(44)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){t.exports=!n(43)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var i=n(40),r=n(33).document,o=i(r)&&i(r.createElement);t.exports=function(t){return o?r.createElement(t):{}}},function(t,e,n){var i=n(40);t.exports=function(t,e){if(!i(t))return t;var n,r;if(e&&"function"==typeof(n=t.toString)&&!i(r=n.call(t)))return r;if("function"==typeof(n=t.valueOf)&&!i(r=n.call(t)))return r;if(!e&&"function"==typeof(n=t.toString)&&!i(r=n.call(t)))return r;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){"use strict";var i=n(48),r=n(63),o=n(64),s=n(65),a=n(52),c=Object.assign;t.exports=!c||n(43)(function(){var t={},e={},n=Symbol(),i="abcdefghijklmnopqrst";return t[n]=7,i.split("").forEach(function(t){e[t]=t}),7!=c({},t)[n]||Object.keys(c({},e)).join("")!=i})?function(t,e){for(var n=s(t),c=arguments.length,u=1,l=r.f,f=o.f;c>u;)for(var d,p=a(arguments[u++]),h=l?i(p).concat(l(p)):i(p),g=h.length,m=0;g>m;)f.call(p,d=h[m++])&&(n[d]=p[d]);return n}:c},function(t,e,n){var i=n(49),r=n(62);t.exports=Object.keys||function(t){return i(t,r)}},function(t,e,n){var i=n(50),r=n(51),o=n(55)(!1),s=n(59)("IE_PROTO");t.exports=function(t,e){var n,a=r(t),c=0,u=[];for(n in a)n!=s&&i(a,n)&&u.push(n);for(;e.length>c;)i(a,n=e[c++])&&(~o(u,n)||u.push(n));return u}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var i=n(52),r=n(54);t.exports=function(t){return i(r(t))}},function(t,e,n){var i=n(53);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==i(t)?t.split(""):Object(t)}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var i=n(51),r=n(56),o=n(58);t.exports=function(t){return function(e,n,s){var a,c=i(e),u=r(c.length),l=o(s,u);if(t&&n!=n){for(;u>l;)if(a=c[l++],a!=a)return!0}else for(;u>l;l++)if((t||l in c)&&c[l]===n)return t||l||0;return!t&&-1}}},function(t,e,n){var i=n(57),r=Math.min;t.exports=function(t){return t>0?r(i(t),9007199254740991):0}},function(t,e){var n=Math.ceil,i=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?i:n)(t)}},function(t,e,n){var i=n(57),r=Math.max,o=Math.min;t.exports=function(t,e){return t=i(t),t<0?r(t+e,0):o(t,e)}},function(t,e,n){var i=n(60)("keys"),r=n(61);t.exports=function(t){return i[t]||(i[t]=r(t))}},function(t,e,n){var i=n(33),r="__core-js_shared__",o=i[r]||(i[r]={});t.exports=function(t){return o[t]||(o[t]={})}},function(t,e){var n=0,i=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+i).toString(36))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){var i=n(54);t.exports=function(t){return Object(i(t))}},function(t,e,n){var i=n(67),r=n(68),o=n(69);__weex_define__("@weex-component/wxc-marquee",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){t.exports={type:"div",classList:["wrap"],events:{appear:"appeared",disappear:"disappeared"},children:[{type:"div",id:"anim",classList:["anim"],children:[{type:"content"}]}]}},function(t,e){t.exports={wrap:{overflow:"hidden",position:"relative"},anim:{flexDirection:"column",position:"absolute",transform:"translateY(0) translateZ(0)"}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{step:0,count:0,index:1,duration:0,interval:0,outofview:!1}},ready:function(){this.interval>0&&this.step>0&&this.duration>0&&this.nextTick()},methods:{nextTick:function(){var t=this;this.outofview?setTimeout(t.nextTick.bind(t),t.interval):setTimeout(function(){t.animation(t.nextTick.bind(t))},t.interval)},animation:function(t){var e=this,i=-e.step*e.index,r=n("@weex-module/animation");r.transition(this.$el("anim"),{styles:{transform:"translateY("+String(i)+"px) translateZ(0)"},timingFunction:"ease",duration:e.duration},function(){e.index=(e.index+1)%e.count,e.$emit("change",{index:e.index,count:e.count}),t&&t()})},appeared:function(){this.outofview=!1},disappeared:function(){this.outofview=!0}}}}},function(t,e,n){var i=n(71),r=n(72),o=n(73);__weex_define__("@weex-component/wxc-navbar",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){t.exports={type:"div",classList:["container"],style:{height:function(){return this.height},backgroundColor:function(){return this.backgroundColor}},attr:{dataRole:function(){return this.dataRole}},children:[{type:"text",classList:["right-text"],style:{color:function(){return this.rightItemColor}},attr:{naviItemPosition:"right",value:function(){return this.rightItemTitle}},shown:function(){return!this.rightItemSrc},events:{click:"onclickrightitem"}},{type:"image",classList:["right-image"],attr:{naviItemPosition:"right",src:function(){return this.rightItemSrc}},shown:function(){return this.rightItemSrc},events:{click:"onclickrightitem"}},{type:"text",classList:["left-text"],style:{color:function(){return this.leftItemColor}},attr:{naviItemPosition:"left",value:function(){return this.leftItemTitle}},shown:function(){return!this.leftItemSrc},events:{click:"onclickleftitem"}},{type:"image",classList:["left-image"],attr:{naviItemPosition:"left",src:function(){return this.leftItemSrc}},shown:function(){return this.leftItemSrc},events:{click:"onclickleftitem"}},{type:"text",classList:["center-text"],style:{color:function(){return this.titleColor}},attr:{naviItemPosition:"center",value:function(){return this.title}}}]}},function(t,e){t.exports={container:{flexDirection:"row",position:"fixed",top:0,left:0,right:0,width:750},"right-text":{position:"absolute",bottom:28,right:32,textAlign:"right",fontSize:32,fontFamily:"'Open Sans', sans-serif"},"left-text":{position:"absolute",bottom:28,left:32,textAlign:"left",fontSize:32,fontFamily:"'Open Sans', sans-serif"},"center-text":{position:"absolute",bottom:25,left:172,right:172,textAlign:"center",fontSize:36,fontWeight:"bold"},"left-image":{position:"absolute",bottom:20,left:28,width:50,height:50},"right-image":{position:"absolute",bottom:20,right:28,width:50,height:50}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{dataRole:"navbar",backgroundColor:"black",height:88,title:"",titleColor:"black",rightItemSrc:"",rightItemTitle:"",rightItemColor:"black",leftItemSrc:"",leftItemTitle:"",leftItemColor:"black"}},methods:{onclickrightitem:function(t){this.$dispatch("naviBar.rightItem.click",{})},onclickleftitem:function(t){this.$dispatch("naviBar.leftItem.click",{})}}}}},function(t,e,n){n(70);var i=n(75),r=n(76),o=n(77);__weex_define__("@weex-component/wxc-navpage",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){t.exports={type:"div",classList:["wrapper"],children:[{type:"wxc-navbar",attr:{dataRole:function(){return this.dataRole},height:function(){return this.height},backgroundColor:function(){return this.backgroundColor},title:function(){return this.title},titleColor:function(){return this.titleColor},leftItemSrc:function(){return this.leftItemSrc},leftItemTitle:function(){return this.leftItemTitle},leftItemColor:function(){return this.leftItemColor},rightItemSrc:function(){return this.rightItemSrc},rightItemTitle:function(){return this.rightItemTitle},rightItemColor:function(){return this.rightItemColor}}},{type:"div",classList:["wrapper"],style:{marginTop:function(){return this.height}},children:[{type:"content"}]}]}},function(t,e){t.exports={wrapper:{position:"absolute",top:0,left:0,right:0,bottom:0,width:750}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{dataRole:"navbar",backgroundColor:"black",height:88,title:"",titleColor:"black",rightItemSrc:"",rightItemTitle:"",rightItemColor:"black",leftItemSrc:"",leftItemTitle:"",leftItemColor:"black"}}}}},function(t,e,n){n(79);var i=n(83),r=n(84),o=n(85);__weex_define__("@weex-component/wxc-tabbar",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e,n){var i=n(80),r=n(81),o=n(82);__weex_define__("@weex-component/wxc-tabitem",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){t.exports={type:"div",classList:["container"],style:{backgroundColor:function(){return this.backgroundColor}},events:{click:"onclickitem"},children:[{type:"image",classList:["top-line"],attr:{src:"http://gtms03.alicdn.com/tps/i3/TB1mdsiMpXXXXXpXXXXNw4JIXXX-640-4.png"}},{type:"image",classList:["tab-icon"],attr:{src:function(){return this.icon}}},{type:"text",classList:["tab-text"],style:{color:function(){return this.titleColor}},attr:{value:function(){return this.title}}}]}},function(t,e){t.exports={container:{flex:1,flexDirection:"column",alignItems:"center",justifyContent:"center",height:88},"top-line":{position:"absolute",top:0,left:0,right:0,height:2},"tab-icon":{marginTop:5,width:40,height:40},"tab-text":{marginTop:5,textAlign:"center",fontSize:20}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{index:0,title:"",titleColor:"#000000",icon:"",backgroundColor:"#ffffff"}},methods:{onclickitem:function(t){var e=this,n={index:e.index};e.$dispatch("tabItem.onClick",n)}}}}},function(t,e){t.exports={type:"div",classList:["wrapper"],children:[{type:"embed",classList:["content"],style:{visibility:function(){return this.visibility}},repeat:function(){return this.tabItems},attr:{src:function(){return this.src},type:"weex"}},{type:"div",classList:["tabbar"],append:"tree",children:[{type:"wxc-tabitem",repeat:function(){return this.tabItems},attr:{index:function(){return this.index},icon:function(){return this.icon},title:function(){return this.title},titleColor:function(){return this.titleColor}}}]}]}},function(t,e){t.exports={wrapper:{width:750,position:"absolute",top:0,left:0,right:0,bottom:0},content:{position:"absolute",top:0,left:0,right:0,bottom:0,marginTop:0,marginBottom:88},tabbar:{flexDirection:"row",position:"fixed",bottom:0,left:0,right:0,height:88}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{tabItems:[],selectedIndex:0,selectedColor:"#ff0000",unselectedColor:"#000000"}},created:function(){this.selected(this.selectedIndex),this.$on("tabItem.onClick",function(t){var e=t.detail;this.selectedIndex=e.index,this.selected(e.index);var n={index:e.index};this.$dispatch("tabBar.onClick",n)})},methods:{selected:function(t){for(var e=0;e<this.tabItems.length;e++){var n=this.tabItems[e];e==t?(n.icon=n.selectedImage,n.titleColor=this.selectedColor,n.visibility="visible"):(n.icon=n.image,n.titleColor=this.unselectedColor,n.visibility="hidden")}}}}}},,,,,,,,,function(t,e,n){"use strict";var i=n(95)(!0);n(96)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=i(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e,n){var i=n(57),r=n(54);t.exports=function(t){return function(e,n){var o,s,a=String(r(e)),c=i(n),u=a.length;return c<0||c>=u?t?"":void 0:(o=a.charCodeAt(c),o<55296||o>56319||c+1===u||(s=a.charCodeAt(c+1))<56320||s>57343?t?a.charAt(c):o:t?a.slice(c,c+2):(o-55296<<10)+(s-56320)+65536)}}},function(t,e,n){"use strict";var i=n(97),r=n(32),o=n(98),s=n(37),a=n(50),c=n(99),u=n(100),l=n(104),f=n(106),d=n(105)("iterator"),p=!([].keys&&"next"in[].keys()),h="@@iterator",g="keys",m="values",x=function(){return this};t.exports=function(t,e,n,b,v,y,w){u(n,e,b);var _,I,C,k=function(t){if(!p&&t in X)return X[t];switch(t){case g:return function(){return new n(this,t)};case m:return function(){return new n(this,t)}}return function(){return new n(this,t)}},L=e+" Iterator",S=v==m,D=!1,X=t.prototype,T=X[d]||X[h]||v&&X[v],O=T||k(v),R=v?S?k("entries"):O:void 0,j="Array"==e?X.entries||T:T;if(j&&(C=f(j.call(new t)),C!==Object.prototype&&(l(C,L,!0),i||a(C,d)||s(C,d,x))),S&&T&&T.name!==m&&(D=!0,O=function(){return T.call(this)}),i&&!w||!p&&!D&&X[d]||s(X,d,O),c[e]=O,c[L]=x,v)if(_={values:S?O:k(m),keys:y?O:k(g),entries:R},w)for(I in _)I in X||o(X,I,_[I]);else r(r.P+r.F*(p||D),e,_);return _}},function(t,e){t.exports=!0},function(t,e,n){t.exports=n(37)},function(t,e){t.exports={}},function(t,e,n){"use strict";var i=n(101),r=n(46),o=n(104),s={};n(37)(s,n(105)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=i(s,{next:r(1,n)}),o(t,e+" Iterator")}},function(t,e,n){var i=n(39),r=n(102),o=n(62),s=n(59)("IE_PROTO"),a=function(){},c="prototype",u=function(){var t,e=n(44)("iframe"),i=o.length,r="<",s=">";for(e.style.display="none",n(103).appendChild(e),e.src="javascript:",t=e.contentWindow.document,t.open(),t.write(r+"script"+s+"document.F=Object"+r+"/script"+s),t.close(),u=t.F;i--;)delete u[c][o[i]];return u()};t.exports=Object.create||function(t,e){var n;return null!==t?(a[c]=i(t),n=new a,a[c]=null,n[s]=t):n=u(),void 0===e?n:r(n,e)}},function(t,e,n){var i=n(38),r=n(39),o=n(48);t.exports=n(42)?Object.defineProperties:function(t,e){r(t);for(var n,s=o(e),a=s.length,c=0;a>c;)i.f(t,n=s[c++],e[n]);return t}},function(t,e,n){t.exports=n(33).document&&document.documentElement},function(t,e,n){var i=n(38).f,r=n(50),o=n(105)("toStringTag");t.exports=function(t,e,n){t&&!r(t=n?t:t.prototype,o)&&i(t,o,{configurable:!0,value:e})}},function(t,e,n){var i=n(60)("wks"),r=n(61),o=n(33).Symbol,s="function"==typeof o,a=t.exports=function(t){return i[t]||(i[t]=s&&o[t]||(s?o:r)("Symbol."+t))};a.store=i},function(t,e,n){var i=n(50),r=n(65),o=n(59)("IE_PROTO"),s=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=r(t),i(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?s:null}},,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e,n){var i=n(134),r=n(135),o=n(136);__weex_define__("@weex-component/unit",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){t.exports={type:"div",classList:["unit-box"],children:[{type:"text",classList:["unit-number"],style:{fontSize:function(){return this.numberSize}},attr:{value:function(){return this.number}}},{type:"text",classList:["unit-text"],attr:{value:function(){return this.label}}}]}},function(t,e){t.exports={"unit-box":{flexDirection:"row",justifyContent:"center",alignItems:"flex-end"},"unit-number":{display:"inline-block",fontSize:50,color:"#111111"},"unit-text":{fontSize:22,color:"#333333",paddingLeft:20,justifyContent:"flex-end",alignItems:"flex-end"}}},function(t,e){t.exports=function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={}}},,,,function(t,e){t.exports={type:"div",classList:["message"],children:[{type:"image",shown:function(){return this.loading},classList:["loading-gif"],attr:{src:"http://img1.vued.vanthink.cn/vuedf072471d0b97d612282d1ce010cb1de1.gif"}},{type:"text",classList:["message-text"],attr:{value:function(){return this.message}}}]}},function(t,e){t.exports={message:{zIndex:2001,position:"absolute",left:30,top:30,height:60,borderRadius:30,paddingLeft:30,paddingRight:30,backgroundColor:"#ffffff",flexDirection:"row",alignItems:"center"},"message-text":{fontSize:20},"loading-gif":{width:30,height:30}}},function(t,e){t.exports=function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={}}},,,,function(t,e){t.exports={type:"div",classList:["success"],children:[{type:"div",classList:["success-data"],children:[{type:"div",classList:["distance-wrap"],children:[{type:"text",classList:["distance"],attr:{value:function(){return this.data.miles}}},{type:"text",classList:["unit"],attr:{value:"公里"}}]},{type:"div",classList:["dashboard"],children:[{type:"div",classList:["dashboard-item"],children:[{type:"div",classList:["time-wrap"],children:[{type:"text",classList:["dashboard-title"],attr:{value:"运动时间"}},{type:"text",classList:["number-lg"],attr:{value:function(){return this.data.time}}}]}]},{type:"div",classList:["dashboard-item"],children:[{type:"text",classList:["dashboard-title"],attr:{value:"热量"}},{type:"text",classList:["number-lg"],attr:{value:function(){return this.data.calories}}}]}]}]},{type:"div",style:{alignItems:"center"},children:[{type:"div",classList:["btn-leave"],events:{click:"pop"},children:[{type:"text",classList:["btn-leave-text"],attr:{value:"确认完成"}}]}]}]}},function(t,e){t.exports={success:{zIndex:10002,position:"absolute",top:0,bottom:0,left:0,right:0,backgroundColor:"rgba(0,0,0,0.85)",justifyContent:"center"},"distance-wrap":{flexDirection:"row",justifyContent:"center",alignItems:"center"},distance:{display:"inline-block",fontSize:220,color:"#ffffff"},unit:{fontSize:22,color:"#cccccc",paddingTop:30,paddingLeft:20},dashboard:{flexDirection:"row",alignItems:"center"},"dashboard-title":{color:"#999999",fontSize:25,marginBottom:20},"dashboard-item":{flex:1,paddingLeft:40,justifyContent:"center",alignItems:"center"},"number-lg":{fontSize:50,color:"#ffffff"},"btn-leave":{width:400,padding:20,marginTop:60,borderWidth:4,borderColor:"#ffffff",alignItems:"center",borderRadius:10},"btn-leave-text":{color:"#ffffff"}}},function(t,e,n){t.exports=function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(133);var r=i("@weex-module/navigator");e.default={methods:{pop:function(){r.pop()}}}}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e){"use strict";t.exports={calcTotal:function(t,e){var n=0;return t.forEach(function(t){n+=e?1*t[e]:t}),n},setTimeFormat:function(t){var e=this.setZero(Math.floor(t/3600)),n=this.setZero(Math.floor(t%3600/60)),i=this.setZero(t%60);return e+":"+n+":"+i},kmtom:function(t){return(t/1e3).toFixed(2)},getDate:function(){var t=new Date,e=t.getFullYear()+"-"+("0"+(1+t.getMonth())).slice("-2")+"-"+("0"+t.getDate()).slice(-2)+" "+("0"+t.getHours()).slice(-2)+":"+("0"+t.getMinutes()).slice(-2);return e},setZero:function(t){return t<10?"0"+t:t},calcSpeed:function(t,e){return(t/e*3.6).toFixed(2)},setPosition:function(t){var e=t.length,n=0,i=0;return t.forEach(function(t){n+=t[1],i+=t[0]}),[(i/e).toFixed(6),(n/e).toFixed(6)]},extend:function(t,e){for(var n in e)try{e[n].constructor===Object?t[n]=this.extend(t[n],e[n]):t[n]=e[n]}catch(i){t[n]=e[n]}return t},setBundleUrl:function(t,e){var n=t,i="",r="",o=void 0,s=n.indexOf("your_current_IP")>=0||n.indexOf("file://assets/")>=0,a=n.indexOf("file:///")>=0&&n.indexOf("WeexDemo.app")>0;if(s)o="file://assets/dist";else if(a)o=n.substring(0,n.lastIndexOf("/")+1);else{var c=/\/\/([^\/]+?)\//.exec(n),u=/\/\/.+\/([^\/]+?)\//.exec(n);c&&c.length>=2&&(i=c[1]),u&&u.length>=2&&(r=u[1]),o="http://"+i+"/"}var l="./index.html?page=",f=o;f="undefined"==typeof navigator||"Mozilla"!==navigator.appCodeName&&"Gecko"!==navigator.product?o+r+"/":"web"===r||"dist"===r?l+"/dist/":l+"";var d=f+e;return d},getUrlParam:function(t,e){var n=new RegExp("[?|&]"+e+"=([^&]+)"),i=t.match(n);return i&&i[1]}}},function(t,e){t.exports={type:"div",classList:["container"],children:[{type:"weex-amap",id:"map2017",attr:{geolocation:"true",center:function(){return this.pos},sdkKey:function(){return this.keys},zoom:function(){return this.zoom}},classList:["map"],children:[{type:"weex-amap-polyline",attr:{path:function(){return this.polylinePath},strokeOpacity:"0.9",strokeStyle:"solid",strokeWidth:"8",strokeColor:"#1ba1e2"}}]},{type:"div",classList:["map-controller"],shown:function(){return 4!=this.status},children:[{type:"div",classList:["dashboard"],children:[{type:"div",classList:["dashboard-item"],children:[{type:"div",classList:["time-wrap"],children:[{type:"text",classList:["dashboard-title"],attr:{value:"运动时间"}},{type:"text",classList:["number-lg"],attr:{value:function(){return this.runningData.time}}}]}]},{type:"div",classList:["dashboard-item"],children:[{type:"text",classList:["dashboard-title"],attr:{value:"速度"}},{type:"text",classList:["number-lg"],attr:{value:function(){return this.runningData.speed}}}]},{type:"div",classList:["dashboard-item"],children:[{type:"text",classList:["dashboard-title"],attr:{value:"距离"}},{type:"text",
classList:["number-lg"],attr:{value:function(){return this.runningData.miles}}}]}]},{type:"div",classList:["btn-wrap"],children:[{type:"div",classList:["btn-circle","btn-green"],shown:function(){return 1==this.status},events:{click:"start"},children:[{type:"image",classList:["btn-icon"],attr:{src:"https://gw.alicdn.com/tfs/TB1sGrEQXXXXXc4XVXXXXXXXXXX-60-60.png"}}]},{type:"div",classList:["btn-circle","btn-midnight"],shown:function(){return 2==this.status||3==this.status},events:{click:"end"},children:[{type:"image",classList:["btn-icon"],attr:{src:"https://gw.alicdn.com/tfs/TB1uEnqQXXXXXcdapXXXXXXXXXX-60-60.png"}}]},{type:"div",classList:["btn-circle","btn-green"],shown:function(){return 3==this.status},events:{click:"continue"},children:[{type:"image",classList:["btn-icon"],attr:{src:"https://gw.alicdn.com/tfs/TB1sGrEQXXXXXc4XVXXXXXXXXXX-60-60.png"}}]},{type:"div",classList:["btn-circle","btn-red"],shown:function(){return 2==this.status},events:{click:"stop"},children:[{type:"image",classList:["btn-icon"],attr:{src:"https://gw.alicdn.com/tfs/TB1A6vJQXXXXXa0XVXXXXXXXXXX-60-60.png"}}]},{type:"div",classList:["btn-circle","btn-red"],shown:function(){return 5==this.status},events:{click:"backHome"},children:[{type:"text",classList:["btn-text"],attr:{value:"返回"}}]}]}]},{type:"div",classList:["countdown-view"],shown:function(){return this.countdown.show},children:[{type:"text",classList:["countdown-text"],attr:{value:function(){return this.countdown.text}}}]},{type:"success",shown:function(){return 4==this.status},attr:{data:function(){return this.runningData}}}]}},function(t,e){t.exports={container:{position:"relative",flex:1,minHeight:600,backgroundColor:"#eeeeee"},"countdown-view":{zIndex:10001,position:"absolute",left:0,right:0,top:0,bottom:0,backgroundColor:"#ffffff",alignItems:"center",justifyContent:"center"},"countdown-text":{color:"#ff656d",fontSize:120},map:{flex:1,minHeight:600},"map-controller":{zIndex:1e4,position:"absolute",left:0,right:0,bottom:0,height:320,backgroundColor:"rgba(255,255,255,1)",borderTopWidth:2,borderTopColor:"rgba(0,0,0,0.25)"},"distance-wrap":{flex:1,flexDirection:"row",justifyContent:"center",alignItems:"center"},distance:{display:"inline-block",fontSize:90,color:"#111111"},unit:{fontSize:22,color:"#333333",paddingTop:30,paddingLeft:20},dashboard:{flex:1,flexDirection:"row"},"dashboard-title":{color:"#999999",fontSize:25,marginBottom:20},"dashboard-item":{flex:1,paddingLeft:40,justifyContent:"center"},"number-lg":{fontSize:42,color:"#222222"},"btn-wrap":{flex:1,flexDirection:"row",alignItems:"center",justifyContent:"center"},"btn-circle":{width:140,height:140,marginLeft:40,marginRight:40,borderRadius:120,alignItems:"center",justifyContent:"center",backgroundColor:"#eeeeee"},"btn-text":{fontSize:30,color:"#ffffff"},"btn-icon":{width:60,height:60},"btn-red":{backgroundColor:"#ff626d"},"btn-green":{backgroundColor:"#21d45f"},"btn-midnight":{backgroundColor:"#34495e"}}},function(t,e,n){t.exports=function(t,e,i){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=n(186),s=r(o),a=n(195),c=r(a);n(4),n(197),n(133),n(198);var u=n(182),l=n(199),f=i("@weex-module/storage"),d=i("@weex-module/amap"),p=i("@weex-module/navigator");t.exports={data:function(){return{keys:{h5:"a69cf63dd09ee79a4ffd222a9c381f60",ios:"c551f83e1e5b19af89c74096f1c0f007",android:"db6a973159cb0c2639ad02c617a786ae"},zoom:16,pos:[116.48635,40.00079],status:l.RUNNING_READY,runningData:{distance:0,miles:0,path:[],time:"00:00:00",seconds:0,speed:0,calories:0},polylinePath:[],message:"正在运行",countdown:{text:"3",show:!1},timeRecorder:null,amapRecorder:null,test:!1,color:"#1ba1e2"}},methods:{start:function(){this.status=l.RUNNING_DOING,this.countdown.show=!0,this.countDownTime(),this.runningAmapGeolocation()},backHome:function(){p.pop()},stop:function(){this.status=l.RUNNING_PAUSE,clearInterval(this.timeRecorder),clearInterval(this.amapRecorder)},continue:function(){this.countDownTime(),this.runningAmapGeolocation(),this.status=l.RUNNING_DOING},end:function(){clearInterval(this.timeRecorder),clearInterval(this.amapRecorder);var t=this;f.getItem("runningData",function(e){var n=[];"success"==e.result&&(n=e.data),"string"==typeof n&&(n=JSON.parse(n)),n.unshift(u.extend({date:u.getDate().replace(/\s.+/,""),standrandDate:u.getDate()},t.runningData)),f.setItem("runningData",(0,c.default)(n),function(e){"success"==e.result&&(t.status=l.RUNNING_END)})})},setUserLocation:function(t){console.log(d),d.getUserLocation(this.$el("map2017").ref,t)},countDownTime:function(){var t=this;this.status==l.RUNNING_DOING&&(this.countdown.show=!0),this.timeRecorder=setInterval(function(){t.runningData.seconds++;var e=["#000000","#2980b9","#34495e"];t.color=e[t.runningData.seconds%3],t.runningData.seconds<=4&&(3==t.runningData.seconds?t.countdown.text="GO!":4==t.runningData.seconds?t.countdown.show=!1:t.countdown.text=3-t.runningData.seconds),t.runningData.time=u.setTimeFormat(t.runningData.seconds)},1e3)},runningAmapGeolocation:function(){var t=this;this.setUserLocation(function(e){"success"==e.result&&(t.pos=e.data.position,t.runningData.path.push(e.data.position))}),this.amapRecorder=setInterval(function(){t.setUserLocation(function(e){if("success"==e.result){if(t.test){var n=t.runningData.path.length;t.runningData.path.push([t.runningData.path[n-1][0]+.0011,t.runningData.path[n-1][1]+.0011])}else t.runningData.path.push(e.data.position);t.polylinePath=(0,s.default)(t.runningData.path),t.pos=u.setPosition(t.runningData.path),t.calcDistanceAndSpeed()}})},1e4)},calcDistanceAndSpeed:function(){var t=this,e=this.runningData.path.length;e>1&&d.getLineDistance(this.runningData.path[e-1],this.runningData.path[e-2],function(e){"success"==e.result&&(console.log(e.data.distance),t.runningData.distance+=e.data.distance),t.runningData.miles=u.kmtom(t.runningData.distance),t.runningData.calories=(t.runningData.distance/1e3).toFixed(2),t.runningData.speed=u.calcSpeed(t.runningData.distance,t.runningData.seconds)})}},created:function(){var t=this,e=this.$getConfig().bundleUrl,n=u.getUrlParam(e,"index");f.getItem("runningData",function(e){var i=[];"success"==e.result&&(i=e.data),"string"==typeof i&&(i=JSON.parse(i)),i[n]&&(t.status=5,t.runningData=i[n],t.polylinePath=t.runningData.path,t.pos=u.setPosition(t.runningData.path),console.log(t.runningData))})}}}},function(t,e,n){t.exports={default:n(187),__esModule:!0}},function(t,e,n){n(94),n(188),t.exports=n(34).Array.from},function(t,e,n){"use strict";var i=n(35),r=n(32),o=n(65),s=n(189),a=n(190),c=n(56),u=n(191),l=n(192);r(r.S+r.F*!n(194)(function(t){Array.from(t)}),"Array",{from:function(t){var e,n,r,f,d=o(t),p="function"==typeof this?this:Array,h=arguments.length,g=h>1?arguments[1]:void 0,m=void 0!==g,x=0,b=l(d);if(m&&(g=i(g,h>2?arguments[2]:void 0,2)),void 0==b||p==Array&&a(b))for(e=c(d.length),n=new p(e);e>x;x++)u(n,x,m?g(d[x],x):d[x]);else for(f=b.call(d),n=new p;!(r=f.next()).done;x++)u(n,x,m?s(f,g,[r.value,x],!0):r.value);return n.length=x,n}})},function(t,e,n){var i=n(39);t.exports=function(t,e,n,r){try{return r?e(i(n)[0],n[1]):e(n)}catch(e){var o=t.return;throw void 0!==o&&i(o.call(t)),e}}},function(t,e,n){var i=n(99),r=n(105)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(i.Array===t||o[r]===t)}},function(t,e,n){"use strict";var i=n(38),r=n(46);t.exports=function(t,e,n){e in t?i.f(t,e,r(0,n)):t[e]=n}},function(t,e,n){var i=n(193),r=n(105)("iterator"),o=n(99);t.exports=n(34).getIteratorMethod=function(t){if(void 0!=t)return t[r]||t["@@iterator"]||o[i(t)]}},function(t,e,n){var i=n(53),r=n(105)("toStringTag"),o="Arguments"==i(function(){return arguments}()),s=function(t,e){try{return t[e]}catch(t){}};t.exports=function(t){var e,n,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=s(e=Object(t),r))?n:o?i(e):"Object"==(a=i(e))&&"function"==typeof e.callee?"Arguments":a}},function(t,e,n){var i=n(105)("iterator"),r=!1;try{var o=[7][i]();o.return=function(){r=!0},Array.from(o,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!r)return!1;var n=!1;try{var o=[7],s=o[i]();s.next=function(){return{done:n=!0}},o[i]=function(){return s},t(o)}catch(t){}return n}},function(t,e,n){t.exports={default:n(196),__esModule:!0}},function(t,e,n){var i=n(34),r=i.JSON||(i.JSON={stringify:JSON.stringify});t.exports=function(t){return r.stringify.apply(r,arguments)}},function(t,e,n){var i=n(140),r=n(141),o=n(142);__weex_define__("@weex-component/message",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e,n){var i=n(146),r=n(147),o=n(148);__weex_define__("@weex-component/success",[],function(t,e,n){o(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=r})},function(t,e){"use strict";t.exports={RUNNING_READY:1,RUNNING_DOING:2,RUNNING_PAUSE:3,RUNNING_END:4}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,