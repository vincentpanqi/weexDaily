!function(t){function e(i){if(n[i])return n[i].exports;var o=n[i]={exports:{},id:i,loaded:!1};return t[i].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){n(126);var i=n(164),o=n(165),r=n(166);__weex_define__("@weex-component/99f27fbe02f545be3edb35deac5cdff5",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o}),__weex_bootstrap__("@weex-component/99f27fbe02f545be3edb35deac5cdff5",void 0,void 0)},,,,function(t,e,n){n(5),n(9),n(13),n(17),n(21),n(25),n(66),n(70),n(74),n(78),n(79)},function(t,e,n){var i=n(6),o=n(7),r=n(8);__weex_define__("@weex-component/wxc-button",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e){t.exports={type:"div",classList:function(){return["btn","btn-"+this.type,"btn-sz-"+this.size]},children:[{type:"text",classList:function(){return["btn-txt","btn-txt-"+this.type,"btn-txt-sz-"+this.size]},attr:{value:function(){return this.value}}}]}},function(t,e){t.exports={btn:{marginBottom:0,alignItems:"center",justifyContent:"center",borderWidth:1,borderStyle:"solid",borderColor:"#333333"},"btn-default":{color:"rgb(51,51,51)"},"btn-primary":{backgroundColor:"rgb(40,96,144)",borderColor:"rgb(40,96,144)"},"btn-success":{backgroundColor:"rgb(92,184,92)",borderColor:"rgb(76,174,76)"},"btn-info":{backgroundColor:"rgb(91,192,222)",borderColor:"rgb(70,184,218)"},"btn-warning":{backgroundColor:"rgb(240,173,78)",borderColor:"rgb(238,162,54)"},"btn-danger":{backgroundColor:"rgb(217,83,79)",borderColor:"rgb(212,63,58)"},"btn-link":{borderColor:"rgba(0,0,0,0)",borderRadius:0},"btn-txt-default":{color:"rgb(51,51,51)"},"btn-txt-primary":{color:"rgb(255,255,255)"},"btn-txt-success":{color:"rgb(255,255,255)"},"btn-txt-info":{color:"rgb(255,255,255)"},"btn-txt-warning":{color:"rgb(255,255,255)"},"btn-txt-danger":{color:"rgb(255,255,255)"},"btn-txt-link":{color:"rgb(51,122,183)"},"btn-sz-large":{width:300,height:100,paddingTop:25,paddingBottom:25,paddingLeft:40,paddingRight:40,borderRadius:15},"btn-sz-middle":{width:240,height:80,paddingTop:15,paddingBottom:15,paddingLeft:30,paddingRight:30,borderRadius:10},"btn-sz-small":{width:170,height:60,paddingTop:12,paddingBottom:12,paddingLeft:25,paddingRight:25,borderRadius:7},"btn-txt-sz-large":{fontSize:45},"btn-txt-sz-middle":{fontSize:35},"btn-txt-sz-small":{fontSize:30}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{type:"default",size:"large",value:""}},methods:{}}}},function(t,e,n){var i=n(10),o=n(11),r=n(12);__weex_define__("@weex-component/wxc-hn",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e){t.exports={type:"div",classList:function(){return["h"+this.level]},style:{justifyContent:"center"},children:[{type:"text",classList:function(){return["txt-h"+this.level]},attr:{value:function(){return this.value}}}]}},function(t,e){t.exports={h1:{height:110,paddingTop:20,paddingBottom:20},h2:{height:110,paddingTop:20,paddingBottom:20},h3:{height:110,paddingTop:20,paddingBottom:20},"txt-h1":{fontSize:70},"txt-h2":{fontSize:52},"txt-h3":{fontSize:42}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{level:1,value:""}},methods:{}}}},function(t,e,n){var i=n(14),o=n(15),r=n(16);__weex_define__("@weex-component/wxc-list-item",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e){t.exports={type:"div",classList:["item"],events:{touchstart:"touchstart",touchend:"touchend"},style:{backgroundColor:function(){return this.bgColor}},children:[{type:"content"}]}},function(t,e){t.exports={item:{paddingTop:25,paddingBottom:25,paddingLeft:35,paddingRight:35,height:160,justifyContent:"center",borderBottomWidth:1,borderColor:"#dddddd"}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{bgColor:"#ffffff"}},methods:{touchstart:function(){},touchend:function(){}}}}},function(t,e,n){var i=n(18),o=n(19),r=n(20);__weex_define__("@weex-component/wxc-panel",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e){t.exports={type:"div",classList:function(){return["panel","panel-"+this.type]},style:{borderWidth:function(){return this.border}},children:[{type:"text",classList:function(){return["panel-header","panel-header-"+this.type]},style:{paddingTop:function(){return this.paddingHead},paddingBottom:function(){return this.paddingHead},paddingLeft:function(){return 1.5*this.paddingHead},paddingRight:function(){return 1.5*this.paddingHead}},attr:{value:function(){return this.title}}},{type:"div",classList:function(){return["panel-body","panel-body-"+this.type]},style:{paddingTop:function(){return this.paddingBody},paddingBottom:function(){return this.paddingBody},paddingLeft:function(){return 1.5*this.paddingBody},paddingRight:function(){return 1.5*this.paddingBody}},children:[{type:"content"}]}]}},function(t,e){t.exports={panel:{marginBottom:20,backgroundColor:"#ffffff",borderColor:"#dddddd",borderWidth:1},"panel-primary":{borderColor:"rgb(40,96,144)"},"panel-success":{borderColor:"rgb(76,174,76)"},"panel-info":{borderColor:"rgb(70,184,218)"},"panel-warning":{borderColor:"rgb(238,162,54)"},"panel-danger":{borderColor:"rgb(212,63,58)"},"panel-header":{backgroundColor:"#f5f5f5",fontSize:40,color:"#333333"},"panel-header-primary":{backgroundColor:"rgb(40,96,144)",color:"#ffffff"},"panel-header-success":{backgroundColor:"rgb(92,184,92)",color:"#ffffff"},"panel-header-info":{backgroundColor:"rgb(91,192,222)",color:"#ffffff"},"panel-header-warning":{backgroundColor:"rgb(240,173,78)",color:"#ffffff"},"panel-header-danger":{backgroundColor:"rgb(217,83,79)",color:"#ffffff"},"panel-body":{}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{type:"default",title:"",paddingBody:20,paddingHead:20,dataClass:"",border:0}},ready:function(){}}}},function(t,e,n){var i=n(22),o=n(23),r=n(24);__weex_define__("@weex-component/wxc-tip",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e){t.exports={type:"div",classList:function(){return["tip","tip-"+this.type]},children:[{type:"text",classList:function(){return["tip-txt","tip-txt-"+this.type]},attr:{value:function(){return this.value}}}]}},function(t,e){t.exports={tip:{paddingLeft:36,paddingRight:36,paddingTop:36,paddingBottom:36,borderRadius:10},"tip-txt":{fontSize:28},"tip-success":{backgroundColor:"#dff0d8",borderColor:"#d6e9c6"},"tip-txt-success":{color:"#3c763d"},"tip-info":{backgroundColor:"#d9edf7",borderColor:"#bce8f1"},"tip-txt-info":{color:"#31708f"},"tip-warning":{backgroundColor:"#fcf8e3",borderColor:"#faebcc"},"tip-txt-warning":{color:"#8a6d3b"},"tip-danger":{backgroundColor:"#f2dede",borderColor:"#ebccd1"},"tip-txt-danger":{color:"#a94442"}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{type:"success",value:""}}}}},function(t,e,n){var i=n(26),o=n(27),r=n(28);__weex_define__("@weex-component/wxc-countdown",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e){t.exports={type:"div",style:{overflow:"hidden",flexDirection:"row"},events:{appear:"appeared",disappear:"disappeared"},children:[{type:"content"}]}},function(t,e){t.exports={wrap:{overflow:"hidden"}}},function(t,e,n){t.exports=function(t,e,i){"use strict";function o(t){return t&&t.__esModule?t:{default:t}}var r=n(29),s=o(r);t.exports={data:function(){return{now:0,remain:0,time:{elapse:0,D:"0",DD:"0",h:"0",hh:"00",H:"0",HH:"0",m:"0",mm:"00",M:"0",MM:"0",s:"0",ss:"00",S:"0",SS:"0"},outofview:!1}},ready:function(){this.remain<=0||(this.now=Date.now(),this.nextTick())},methods:{nextTick:function(){this.outofview?setTimeout(this.nextTick.bind(this),1e3):(this.time.elapse=parseInt((Date.now()-this.now)/1e3),this.calc()?(this.$emit("tick",(0,s.default)({},this.time)),setTimeout(this.nextTick.bind(this),1e3)):this.$emit("alarm",(0,s.default)({},this.time)),this._app.updateActions())},format:function(t){return t.length>=2?t:"0"+t},calc:function(){var t=this.remain-this.time.elapse;return t<0&&(t=0),this.time.D=String(parseInt(t/86400)),this.time.DD=this.format(this.time.D),this.time.h=String(parseInt((t-86400*parseInt(this.time.D))/3600)),this.time.hh=this.format(this.time.h),this.time.H=String(parseInt(t/3600)),this.time.HH=this.format(this.time.H),this.time.m=String(parseInt((t-3600*parseInt(this.time.H))/60)),this.time.mm=this.format(this.time.m),this.time.M=String(parseInt(t/60)),this.time.MM=this.format(this.time.M),this.time.s=String(t-60*parseInt(this.time.M)),this.time.ss=this.format(this.time.s),this.time.S=String(t),this.time.SS=this.format(this.time.S),t>0},appeared:function(){this.outofview=!1},disappeared:function(){this.outofview=!0}}}}},function(t,e,n){t.exports={default:n(30),__esModule:!0}},function(t,e,n){n(31),t.exports=n(34).Object.assign},function(t,e,n){var i=n(32);i(i.S+i.F,"Object",{assign:n(47)})},function(t,e,n){var i=n(33),o=n(34),r=n(35),s=n(37),a="prototype",u=function(t,e,n){var c,f,l,d=t&u.F,p=t&u.G,h=t&u.S,g=t&u.P,m=t&u.B,x=t&u.W,b=p?o:o[e]||(o[e]={}),y=b[a],v=p?i:h?i[e]:(i[e]||{})[a];p&&(n=e);for(c in n)f=!d&&v&&void 0!==v[c],f&&c in b||(l=f?v[c]:n[c],b[c]=p&&"function"!=typeof v[c]?n[c]:m&&f?r(l,i):x&&v[c]==l?function(t){var e=function(e,n,i){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,i)}return t.apply(this,arguments)};return e[a]=t[a],e}(l):g&&"function"==typeof l?r(Function.call,l):l,g&&((b.virtual||(b.virtual={}))[c]=l,t&u.R&&y&&!y[c]&&s(y,c,l)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,t.exports=u},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){var n=t.exports={version:"2.4.0"};"number"==typeof __e&&(__e=n)},function(t,e,n){var i=n(36);t.exports=function(t,e,n){if(i(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,i){return t.call(e,n,i)};case 3:return function(n,i,o){return t.call(e,n,i,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){var i=n(38),o=n(46);t.exports=n(42)?function(t,e,n){return i.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var i=n(39),o=n(41),r=n(45),s=Object.defineProperty;e.f=n(42)?Object.defineProperty:function(t,e,n){if(i(t),e=r(e,!0),i(n),o)try{return s(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var i=n(40);t.exports=function(t){if(!i(t))throw TypeError(t+" is not an object!");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){t.exports=!n(42)&&!n(43)(function(){return 7!=Object.defineProperty(n(44)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){t.exports=!n(43)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var i=n(40),o=n(33).document,r=i(o)&&i(o.createElement);t.exports=function(t){return r?o.createElement(t):{}}},function(t,e,n){var i=n(40);t.exports=function(t,e){if(!i(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!i(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!i(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!i(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){"use strict";var i=n(48),o=n(63),r=n(64),s=n(65),a=n(52),u=Object.assign;t.exports=!u||n(43)(function(){var t={},e={},n=Symbol(),i="abcdefghijklmnopqrst";return t[n]=7,i.split("").forEach(function(t){e[t]=t}),7!=u({},t)[n]||Object.keys(u({},e)).join("")!=i})?function(t,e){for(var n=s(t),u=arguments.length,c=1,f=o.f,l=r.f;u>c;)for(var d,p=a(arguments[c++]),h=f?i(p).concat(f(p)):i(p),g=h.length,m=0;g>m;)l.call(p,d=h[m++])&&(n[d]=p[d]);return n}:u},function(t,e,n){var i=n(49),o=n(62);t.exports=Object.keys||function(t){return i(t,o)}},function(t,e,n){var i=n(50),o=n(51),r=n(55)(!1),s=n(59)("IE_PROTO");t.exports=function(t,e){var n,a=o(t),u=0,c=[];for(n in a)n!=s&&i(a,n)&&c.push(n);for(;e.length>u;)i(a,n=e[u++])&&(~r(c,n)||c.push(n));return c}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var i=n(52),o=n(54);t.exports=function(t){return i(o(t))}},function(t,e,n){var i=n(53);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==i(t)?t.split(""):Object(t)}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var i=n(51),o=n(56),r=n(58);t.exports=function(t){return function(e,n,s){var a,u=i(e),c=o(u.length),f=r(s,c);if(t&&n!=n){for(;c>f;)if(a=u[f++],a!=a)return!0}else for(;c>f;f++)if((t||f in u)&&u[f]===n)return t||f||0;return!t&&-1}}},function(t,e,n){var i=n(57),o=Math.min;t.exports=function(t){return t>0?o(i(t),9007199254740991):0}},function(t,e){var n=Math.ceil,i=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?i:n)(t)}},function(t,e,n){var i=n(57),o=Math.max,r=Math.min;t.exports=function(t,e){return t=i(t),t<0?o(t+e,0):r(t,e)}},function(t,e,n){var i=n(60)("keys"),o=n(61);t.exports=function(t){return i[t]||(i[t]=o(t))}},function(t,e,n){var i=n(33),o="__core-js_shared__",r=i[o]||(i[o]={});t.exports=function(t){return r[t]||(r[t]={})}},function(t,e){var n=0,i=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+i).toString(36))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){var i=n(54);t.exports=function(t){return Object(i(t))}},function(t,e,n){var i=n(67),o=n(68),r=n(69);__weex_define__("@weex-component/wxc-marquee",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e){t.exports={type:"div",classList:["wrap"],events:{appear:"appeared",disappear:"disappeared"},children:[{type:"div",id:"anim",classList:["anim"],children:[{type:"content"}]}]}},function(t,e){t.exports={wrap:{overflow:"hidden",position:"relative"},anim:{flexDirection:"column",position:"absolute",transform:"translateY(0) translateZ(0)"}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{step:0,count:0,index:1,duration:0,interval:0,outofview:!1}},ready:function(){this.interval>0&&this.step>0&&this.duration>0&&this.nextTick()},methods:{nextTick:function(){var t=this;this.outofview?setTimeout(t.nextTick.bind(t),t.interval):setTimeout(function(){t.animation(t.nextTick.bind(t))},t.interval)},animation:function(t){var e=this,i=-e.step*e.index,o=n("@weex-module/animation");o.transition(this.$el("anim"),{styles:{transform:"translateY("+String(i)+"px) translateZ(0)"},timingFunction:"ease",duration:e.duration},function(){e.index=(e.index+1)%e.count,e.$emit("change",{index:e.index,count:e.count}),t&&t()})},appeared:function(){this.outofview=!1},disappeared:function(){this.outofview=!0}}}}},function(t,e,n){var i=n(71),o=n(72),r=n(73);__weex_define__("@weex-component/wxc-navbar",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e){t.exports={type:"div",classList:["container"],style:{height:function(){return this.height},backgroundColor:function(){return this.backgroundColor}},attr:{dataRole:function(){return this.dataRole}},children:[{type:"text",classList:["right-text"],style:{color:function(){return this.rightItemColor}},attr:{naviItemPosition:"right",value:function(){return this.rightItemTitle}},shown:function(){return!this.rightItemSrc},events:{click:"onclickrightitem"}},{type:"image",classList:["right-image"],attr:{naviItemPosition:"right",src:function(){return this.rightItemSrc}},shown:function(){return this.rightItemSrc},events:{click:"onclickrightitem"}},{type:"text",classList:["left-text"],style:{color:function(){return this.leftItemColor}},attr:{naviItemPosition:"left",value:function(){return this.leftItemTitle}},shown:function(){return!this.leftItemSrc},events:{click:"onclickleftitem"}},{type:"image",classList:["left-image"],attr:{naviItemPosition:"left",src:function(){return this.leftItemSrc}},shown:function(){return this.leftItemSrc},events:{click:"onclickleftitem"}},{type:"text",classList:["center-text"],style:{color:function(){return this.titleColor}},attr:{naviItemPosition:"center",value:function(){return this.title}}}]}},function(t,e){t.exports={container:{flexDirection:"row",position:"fixed",top:0,left:0,right:0,width:750},"right-text":{position:"absolute",bottom:28,right:32,textAlign:"right",fontSize:32,fontFamily:"'Open Sans', sans-serif"},"left-text":{position:"absolute",bottom:28,left:32,textAlign:"left",fontSize:32,fontFamily:"'Open Sans', sans-serif"},"center-text":{position:"absolute",bottom:25,left:172,right:172,textAlign:"center",fontSize:36,fontWeight:"bold"},"left-image":{position:"absolute",bottom:20,left:28,width:50,height:50},"right-image":{position:"absolute",bottom:20,right:28,width:50,height:50}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{dataRole:"navbar",backgroundColor:"black",height:88,title:"",titleColor:"black",rightItemSrc:"",rightItemTitle:"",rightItemColor:"black",leftItemSrc:"",leftItemTitle:"",leftItemColor:"black"}},methods:{onclickrightitem:function(t){this.$dispatch("naviBar.rightItem.click",{})},onclickleftitem:function(t){this.$dispatch("naviBar.leftItem.click",{})}}}}},function(t,e,n){n(70);var i=n(75),o=n(76),r=n(77);__weex_define__("@weex-component/wxc-navpage",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e){t.exports={type:"div",classList:["wrapper"],children:[{type:"wxc-navbar",attr:{dataRole:function(){return this.dataRole},height:function(){return this.height},backgroundColor:function(){return this.backgroundColor},title:function(){return this.title},titleColor:function(){return this.titleColor},leftItemSrc:function(){return this.leftItemSrc},leftItemTitle:function(){return this.leftItemTitle},leftItemColor:function(){return this.leftItemColor},rightItemSrc:function(){return this.rightItemSrc},rightItemTitle:function(){return this.rightItemTitle},rightItemColor:function(){return this.rightItemColor}}},{type:"div",classList:["wrapper"],style:{marginTop:function(){return this.height}},children:[{type:"content"}]}]}},function(t,e){t.exports={wrapper:{position:"absolute",top:0,left:0,right:0,bottom:0,width:750}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{dataRole:"navbar",backgroundColor:"black",height:88,title:"",titleColor:"black",rightItemSrc:"",rightItemTitle:"",rightItemColor:"black",leftItemSrc:"",leftItemTitle:"",leftItemColor:"black"}}}}},function(t,e,n){n(79);var i=n(83),o=n(84),r=n(85);__weex_define__("@weex-component/wxc-tabbar",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e,n){var i=n(80),o=n(81),r=n(82);__weex_define__("@weex-component/wxc-tabitem",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e){t.exports={type:"div",classList:["container"],style:{backgroundColor:function(){return this.backgroundColor}},events:{click:"onclickitem"},children:[{type:"image",classList:["top-line"],attr:{src:"http://gtms03.alicdn.com/tps/i3/TB1mdsiMpXXXXXpXXXXNw4JIXXX-640-4.png"}},{type:"image",classList:["tab-icon"],attr:{src:function(){return this.icon}}},{type:"text",classList:["tab-text"],style:{color:function(){return this.titleColor}},attr:{value:function(){return this.title}}}]}},function(t,e){t.exports={container:{flex:1,flexDirection:"column",alignItems:"center",justifyContent:"center",height:88},"top-line":{position:"absolute",top:0,left:0,right:0,height:2},"tab-icon":{marginTop:5,width:40,height:40},"tab-text":{marginTop:5,textAlign:"center",fontSize:20}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{index:0,title:"",titleColor:"#000000",icon:"",backgroundColor:"#ffffff"}},methods:{onclickitem:function(t){var e=this,n={index:e.index};e.$dispatch("tabItem.onClick",n)}}}}},function(t,e){t.exports={type:"div",classList:["wrapper"],children:[{type:"embed",classList:["content"],style:{visibility:function(){return this.visibility}},repeat:function(){return this.tabItems},attr:{src:function(){return this.src},type:"weex"}},{type:"div",classList:["tabbar"],append:"tree",children:[{type:"wxc-tabitem",repeat:function(){return this.tabItems},attr:{index:function(){return this.index},icon:function(){return this.icon},title:function(){return this.title},titleColor:function(){return this.titleColor}}}]}]}},function(t,e){t.exports={wrapper:{width:750,position:"absolute",top:0,left:0,right:0,bottom:0},content:{position:"absolute",top:0,left:0,right:0,bottom:0,marginTop:0,marginBottom:88},tabbar:{flexDirection:"row",position:"fixed",bottom:0,left:0,right:0,height:88}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{tabItems:[],selectedIndex:0,selectedColor:"#ff0000",unselectedColor:"#000000"}},created:function(){this.selected(this.selectedIndex),this.$on("tabItem.onClick",function(t){var e=t.detail;this.selectedIndex=e.index,this.selected(e.index);var n={index:e.index};this.$dispatch("tabBar.onClick",n)})},methods:{selected:function(t){for(var e=0;e<this.tabItems.length;e++){var n=this.tabItems[e];e==t?(n.icon=n.selectedImage,n.titleColor=this.selectedColor,n.visibility="visible"):(n.icon=n.image,n.titleColor=this.unselectedColor,n.visibility="hidden")}}}}}},,,,,function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{default:t}}function o(t,e){r.sendHttp({method:"GET",url:t},function(t){var n=JSON.parse(t);e(n)})}var r,s=n(91),a=i(s);__weex_define__("@weex-temp/api",function(t){r=t("@weex-module/stream")});var u={zhihuBaseurl:"http://zhihuhu.duapp.com",zhihuArticles:"/api-statis/articles/",zhihuArticle:"/article/",zhihuYear:"/api-statis/year/",zhihuMouth:"/api-statis/month",baseurl:"http://v3.wufazhuce.com:8000/api",homePage:"/hp/bymonth/",readingCarousel:"/reading/carousel",readingIndex:"/reading/index/",essay:"/essay/",serialcontent:"/serialcontent/",question:"/question/",carouselList:"/reading/carousel/",movieList:"/movie/list/",movieDetail:"/movie/detail/"};e.getHome=function(t,e){o(u.baseurl+u.homePage+t,e)},e.getZhihuArticles=function(t,e){o(u.zhihuBaseurl+u.zhihuArticles+t,e)},e.getZhihuArticle=function(t,e){o(u.zhihuBaseurl+u.zhihuArticle+t,e)},e.getZhihuYear=function(t,e){o(u.zhihuBaseurl+u.zhihuYear+t,e)},e.getZhihuMonth=function(t,e){o(u.zhihuBaseurl+u.zhihuMouth+t,e)},e.getReadingCarousel=function(t){o(u.baseurl+u.readingCarousel,t)},e.getReadingIndex=function(t,e){o(u.baseurl+u.readingIndex+t,e)},e.getEssay=function(t,e){o(u.baseurl+u.essay+t,e)},e.getSerialContent=function(t,e){o(u.baseurl+u.serialcontent+t,e)},e.getQuestionDetail=function(t,e){o(u.baseurl+u.question+t,e)},e.getCarouseList=function(t,e){o(u.baseurl+u.carouselList+t,e)},e.getMovieList=function(t,e){o(u.baseurl+u.movieList+t,e)},e.getMovieDetail=function(t,e){o(u.baseurl+u.movieDetail+t,e)},e.getZhihuList=function(t,e){o(u.baseurl+u.movieList+t,e)},e.getZhihuDetail=function(t,e){o(u.baseurl+u.movieDetail+t,e)},e.getBaseUrl=function(t,e){t=new String(t);var n,i=t.indexOf("file://assets/")>=0,o=t.indexOf("file:///")>=0&&t.indexOf("WeexDemo.app")>0;if(i)n="file://assets/dist/";else if(o)n=t.substring(0,t.lastIndexOf("/")+1);else{var r="localhost:8080",s=/\/\/([^\/]+?)\//.exec(t);s&&s.length>=2&&(r=s[1]),n="object"===("undefined"==typeof window?"undefined":(0,a.default)(window))?e?"http://"+r+"/index.html?page=./dist/":"/dist/":"http://"+r+"/dist/"}return n}},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{default:t}}e.__esModule=!0;var o=n(92),r=i(o),s=n(112),a=i(s),u="function"==typeof a.default&&"symbol"==typeof r.default?function(t){return typeof t}:function(t){return t&&"function"==typeof a.default&&t.constructor===a.default&&t!==a.default.prototype?"symbol":typeof t};e.default="function"==typeof a.default&&"symbol"===u(r.default)?function(t){return"undefined"==typeof t?"undefined":u(t)}:function(t){return t&&"function"==typeof a.default&&t.constructor===a.default&&t!==a.default.prototype?"symbol":"undefined"==typeof t?"undefined":u(t)}},function(t,e,n){t.exports={default:n(93),__esModule:!0}},function(t,e,n){n(94),n(107),t.exports=n(111).f("iterator")},function(t,e,n){"use strict";var i=n(95)(!0);n(96)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=i(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e,n){var i=n(57),o=n(54);t.exports=function(t){return function(e,n){var r,s,a=String(o(e)),u=i(n),c=a.length;return u<0||u>=c?t?"":void 0:(r=a.charCodeAt(u),r<55296||r>56319||u+1===c||(s=a.charCodeAt(u+1))<56320||s>57343?t?a.charAt(u):r:t?a.slice(u,u+2):(r-55296<<10)+(s-56320)+65536)}}},function(t,e,n){"use strict";var i=n(97),o=n(32),r=n(98),s=n(37),a=n(50),u=n(99),c=n(100),f=n(104),l=n(106),d=n(105)("iterator"),p=!([].keys&&"next"in[].keys()),h="@@iterator",g="keys",m="values",x=function(){return this};t.exports=function(t,e,n,b,y,v,w){c(n,e,b);var _,C,S,k=function(t){if(!p&&t in T)return T[t];switch(t){case g:return function(){return new n(this,t)};case m:return function(){return new n(this,t)}}return function(){return new n(this,t)}},I=e+" Iterator",O=y==m,L=!1,T=t.prototype,M=T[d]||T[h]||y&&T[y],j=M||k(y),z=y?O?k("entries"):j:void 0,P="Array"==e?T.entries||M:M;if(P&&(S=l(P.call(new t)),S!==Object.prototype&&(f(S,I,!0),i||a(S,d)||s(S,d,x))),O&&M&&M.name!==m&&(L=!0,j=function(){return M.call(this)}),i&&!w||!p&&!L&&T[d]||s(T,d,j),u[e]=j,u[I]=x,y)if(_={values:O?j:k(m),keys:v?j:k(g),entries:z},w)for(C in _)C in T||r(T,C,_[C]);else o(o.P+o.F*(p||L),e,_);return _}},function(t,e){t.exports=!0},function(t,e,n){t.exports=n(37)},function(t,e){t.exports={}},function(t,e,n){"use strict";var i=n(101),o=n(46),r=n(104),s={};n(37)(s,n(105)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=i(s,{next:o(1,n)}),r(t,e+" Iterator")}},function(t,e,n){var i=n(39),o=n(102),r=n(62),s=n(59)("IE_PROTO"),a=function(){},u="prototype",c=function(){var t,e=n(44)("iframe"),i=r.length,o="<",s=">";for(e.style.display="none",n(103).appendChild(e),e.src="javascript:",t=e.contentWindow.document,t.open(),t.write(o+"script"+s+"document.F=Object"+o+"/script"+s),t.close(),c=t.F;i--;)delete c[u][r[i]];return c()};t.exports=Object.create||function(t,e){var n;return null!==t?(a[u]=i(t),n=new a,a[u]=null,n[s]=t):n=c(),void 0===e?n:o(n,e)}},function(t,e,n){var i=n(38),o=n(39),r=n(48);t.exports=n(42)?Object.defineProperties:function(t,e){o(t);for(var n,s=r(e),a=s.length,u=0;a>u;)i.f(t,n=s[u++],e[n]);return t}},function(t,e,n){t.exports=n(33).document&&document.documentElement},function(t,e,n){var i=n(38).f,o=n(50),r=n(105)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,r)&&i(t,r,{configurable:!0,value:e})}},function(t,e,n){var i=n(60)("wks"),o=n(61),r=n(33).Symbol,s="function"==typeof r,a=t.exports=function(t){return i[t]||(i[t]=s&&r[t]||(s?r:o)("Symbol."+t))};a.store=i},function(t,e,n){var i=n(50),o=n(65),r=n(59)("IE_PROTO"),s=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),i(t,r)?t[r]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?s:null}},function(t,e,n){n(108);for(var i=n(33),o=n(37),r=n(99),s=n(105)("toStringTag"),a=["NodeList","DOMTokenList","MediaList","StyleSheetList","CSSRuleList"],u=0;u<5;u++){var c=a[u],f=i[c],l=f&&f.prototype;l&&!l[s]&&o(l,s,c),r[c]=r.Array}},function(t,e,n){"use strict";var i=n(109),o=n(110),r=n(99),s=n(51);t.exports=n(96)(Array,"Array",function(t,e){this._t=s(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,o(1)):"keys"==e?o(0,n):"values"==e?o(0,t[n]):o(0,[n,t[n]])},"values"),r.Arguments=r.Array,i("keys"),i("values"),i("entries")},function(t,e){t.exports=function(){}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){e.f=n(105)},function(t,e,n){t.exports={default:n(113),__esModule:!0}},function(t,e,n){n(114),n(123),n(124),n(125),t.exports=n(34).Symbol},function(t,e,n){"use strict";var i=n(33),o=n(50),r=n(42),s=n(32),a=n(98),u=n(115).KEY,c=n(43),f=n(60),l=n(104),d=n(61),p=n(105),h=n(111),g=n(116),m=n(117),x=n(118),b=n(119),y=n(39),v=n(51),w=n(45),_=n(46),C=n(101),S=n(120),k=n(122),I=n(38),O=n(48),L=k.f,T=I.f,M=S.f,j=i.Symbol,z=i.JSON,P=z&&z.stringify,B="prototype",E=p("_hidden"),D=p("toPrimitive"),R={}.propertyIsEnumerable,A=f("symbol-registry"),F=f("symbols"),$=f("op-symbols"),N=Object[B],H="function"==typeof j,W=i.QObject,X=!W||!W[B]||!W[B].findChild,Z=r&&c(function(){return 7!=C(T({},"a",{get:function(){return T(this,"a",{value:7}).a}})).a})?function(t,e,n){var i=L(N,e);i&&delete N[e],T(t,e,n),i&&t!==N&&T(N,e,i)}:T,Y=function(t){var e=F[t]=C(j[B]);return e._k=t,e},J=H&&"symbol"==typeof j.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof j},q=function(t,e,n){return t===N&&q($,e,n),y(t),e=w(e,!0),y(n),o(F,e)?(n.enumerable?(o(t,E)&&t[E][e]&&(t[E][e]=!1),n=C(n,{enumerable:_(0,!1)})):(o(t,E)||T(t,E,_(1,{})),t[E][e]=!0),Z(t,e,n)):T(t,e,n)},G=function(t,e){y(t);for(var n,i=x(e=v(e)),o=0,r=i.length;r>o;)q(t,n=i[o++],e[n]);return t},U=function(t,e){return void 0===e?C(t):G(C(t),e)},K=function(t){var e=R.call(this,t=w(t,!0));return!(this===N&&o(F,t)&&!o($,t))&&(!(e||!o(this,t)||!o(F,t)||o(this,E)&&this[E][t])||e)},Q=function(t,e){if(t=v(t),e=w(e,!0),t!==N||!o(F,e)||o($,e)){var n=L(t,e);return!n||!o(F,e)||o(t,E)&&t[E][e]||(n.enumerable=!0),n}},V=function(t){for(var e,n=M(v(t)),i=[],r=0;n.length>r;)o(F,e=n[r++])||e==E||e==u||i.push(e);return i},tt=function(t){for(var e,n=t===N,i=M(n?$:v(t)),r=[],s=0;i.length>s;)!o(F,e=i[s++])||n&&!o(N,e)||r.push(F[e]);return r};H||(j=function(){if(this instanceof j)throw TypeError("Symbol is not a constructor!");var t=d(arguments.length>0?arguments[0]:void 0),e=function(n){this===N&&e.call($,n),o(this,E)&&o(this[E],t)&&(this[E][t]=!1),Z(this,t,_(1,n))};return r&&X&&Z(N,t,{configurable:!0,set:e}),Y(t)},a(j[B],"toString",function(){return this._k}),k.f=Q,I.f=q,n(121).f=S.f=V,n(64).f=K,n(63).f=tt,r&&!n(97)&&a(N,"propertyIsEnumerable",K,!0),h.f=function(t){return Y(p(t))}),s(s.G+s.W+s.F*!H,{Symbol:j});for(var et="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),nt=0;et.length>nt;)p(et[nt++]);for(var et=O(p.store),nt=0;et.length>nt;)g(et[nt++]);s(s.S+s.F*!H,"Symbol",{for:function(t){return o(A,t+="")?A[t]:A[t]=j(t)},keyFor:function(t){if(J(t))return m(A,t);throw TypeError(t+" is not a symbol!")},useSetter:function(){X=!0},useSimple:function(){X=!1}}),s(s.S+s.F*!H,"Object",{
create:U,defineProperty:q,defineProperties:G,getOwnPropertyDescriptor:Q,getOwnPropertyNames:V,getOwnPropertySymbols:tt}),z&&s(s.S+s.F*(!H||c(function(){var t=j();return"[null]"!=P([t])||"{}"!=P({a:t})||"{}"!=P(Object(t))})),"JSON",{stringify:function(t){if(void 0!==t&&!J(t)){for(var e,n,i=[t],o=1;arguments.length>o;)i.push(arguments[o++]);return e=i[1],"function"==typeof e&&(n=e),!n&&b(e)||(e=function(t,e){if(n&&(e=n.call(this,t,e)),!J(e))return e}),i[1]=e,P.apply(z,i)}}}),j[B][D]||n(37)(j[B],D,j[B].valueOf),l(j,"Symbol"),l(Math,"Math",!0),l(i.JSON,"JSON",!0)},function(t,e,n){var i=n(61)("meta"),o=n(40),r=n(50),s=n(38).f,a=0,u=Object.isExtensible||function(){return!0},c=!n(43)(function(){return u(Object.preventExtensions({}))}),f=function(t){s(t,i,{value:{i:"O"+ ++a,w:{}}})},l=function(t,e){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!r(t,i)){if(!u(t))return"F";if(!e)return"E";f(t)}return t[i].i},d=function(t,e){if(!r(t,i)){if(!u(t))return!0;if(!e)return!1;f(t)}return t[i].w},p=function(t){return c&&h.NEED&&u(t)&&!r(t,i)&&f(t),t},h=t.exports={KEY:i,NEED:!1,fastKey:l,getWeak:d,onFreeze:p}},function(t,e,n){var i=n(33),o=n(34),r=n(97),s=n(111),a=n(38).f;t.exports=function(t){var e=o.Symbol||(o.Symbol=r?{}:i.Symbol||{});"_"==t.charAt(0)||t in e||a(e,t,{value:s.f(t)})}},function(t,e,n){var i=n(48),o=n(51);t.exports=function(t,e){for(var n,r=o(t),s=i(r),a=s.length,u=0;a>u;)if(r[n=s[u++]]===e)return n}},function(t,e,n){var i=n(48),o=n(63),r=n(64);t.exports=function(t){var e=i(t),n=o.f;if(n)for(var s,a=n(t),u=r.f,c=0;a.length>c;)u.call(t,s=a[c++])&&e.push(s);return e}},function(t,e,n){var i=n(53);t.exports=Array.isArray||function(t){return"Array"==i(t)}},function(t,e,n){var i=n(51),o=n(121).f,r={}.toString,s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],a=function(t){try{return o(t)}catch(t){return s.slice()}};t.exports.f=function(t){return s&&"[object Window]"==r.call(t)?a(t):o(i(t))}},function(t,e,n){var i=n(49),o=n(62).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return i(t,o)}},function(t,e,n){var i=n(64),o=n(46),r=n(51),s=n(45),a=n(50),u=n(41),c=Object.getOwnPropertyDescriptor;e.f=n(42)?c:function(t,e){if(t=r(t),e=s(e,!0),u)try{return c(t,e)}catch(t){}if(a(t,e))return o(!i.f.call(t,e),t[e])}},function(t,e){},function(t,e,n){n(116)("asyncIterator")},function(t,e,n){n(116)("observable")},function(t,e,n){var i=n(127),o=n(128),r=n(129);__weex_define__("@weex-component/nav-bar-normal",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e){t.exports={type:"div",children:[{type:"div",classList:["nav_bar"],children:[{type:"div",style:{flex:1},children:[{type:"image",style:{width:99,height:99},shown:function(){return this.showback},events:{click:"onBackClick"},attr:{src:"https://github.com/dodola/WeexOne/raw/master/imgs/return_image.png"}}]},{type:"div",classList:["nav_title"],children:[{type:"text",classList:["text-type"],attr:{value:function(){return this.title}}}]},{type:"div",style:{flex:1}}]},{type:"div",classList:["separate-item-text"]}]}},function(t,e){t.exports={"text-type":{color:"#29a7e2",marginLeft:10},nav_bar:{flexDirection:"row",marginBottom:10,height:99},nav_logo:{width:75,height:30},nav_title:{flex:1,justifyContent:"center",alignItems:"center",flexDirection:"row"},"separate-item-text":{height:1,backgroundColor:"#d4d4d4"}}},function(t,e,n){t.exports=function(t,e,i){"use strict";n(4);i("@weex-module/modal");t.exports={data:function(){return{title:"阅读",justifyContent:"center",showback:!1}},created:function(){},methods:{onBackClick:function(t){this.$dispatch("onbackclick",{})}}}}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e){t.exports={type:"div",children:[{type:"nav-bar-normal",attr:{showback:"true",title:"电影"}},{type:"scroller",children:[{type:"slider",classList:["slider"],append:"tree",attr:{autoPlay:"true"},children:[{type:"div",repeat:{expression:function(){return this.photo},value:"i"},children:[{type:"image",classList:["slider"],attr:{src:function(){return this.i}}}]},{type:"indicator",classList:["indicator"]}]},{type:"text",style:{width:750,fontWeight:"bold",fontSize:48,textAlign:"center",color:"#333333",marginTop:40,marginBottom:40},attr:{value:function(){return this.title}}},{type:"wxc-panel",attr:{title:"演员",type:"primary"},children:[{type:"text",attr:{value:function(){return this.info}}}]},{type:"wxc-panel",attr:{title:"剧情",type:"primary"},children:[{type:"text",attr:{value:function(){return this.officialstory}}}]}]}]}},function(t,e){t.exports={slider:{width:750,height:440},video:{width:750,height:460},indicator:{position:"absolute",width:690,height:20,top:400,left:240,itemColor:"#dddddd",itemSelectedColor:"rgb(40, 96, 144)"}}},function(t,e,n){t.exports=function(t,e,i){"use strict";n(4);var o=(i("@weex-module/modal"),i("@weex-module/navigator")),r=n(90);t.exports={data:function(){return{playStatus:"play",video:"",title:"",officialstory:"",info:"",photo:[]}},created:function(){var t=this,e=this.$getConfig().bundleUrl,n=t.getParameterByName("id",e);n.lastIndexOf("?")!=-1&&(n=n.substr(0,n.lastIndexOf("?"))),r.getMovieDetail(n,function(e){t.video=e.data.video,t.title=e.data.title,t.officialstory=e.data.officialstory,t.info=e.data.info,t.photo=e.data.photo}),this.$on("onbackclick",function(t){var e={animated:"true"};o.pop(e,function(t){})})},methods:{getParameterByName:function(t,e){t=t.replace(/[\[\]]/g,"\\$&");var n=new RegExp("[?&]"+t+"(=([^&#]*)|&|#|$)"),i=n.exec(e);return i?i[2]?decodeURIComponent(i[2].replace(/\+/g," ")):"":null},pause:function(){this.playStatus="pause"},play:function(){this.playStatus="play"},onpause:function(){this.$call("modal","toast",{message:"video pause"})},onstart:function(){this.$call("modal","toast",{message:"video start"})},onfinish:function(){this.$call("modal","toast",{message:"video finish"})},onfail:function(){this.$call("modal","toast",{message:"video fail"})}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,