!function(t){function n(r){if(e[r])return e[r].exports;var i=e[r]={exports:{},id:r,loaded:!1};return t[r].call(i.exports,i,i.exports,n),i.loaded=!0,i.exports}var e={};return n.m=t,n.c=e,n.p="",n(0)}([function(t,n,e){var r=e(237),i=e(238),o=e(239);__weex_define__("@weex-component/8c435569e8c8791c3994cac0929b1756",[],function(t,n,e){o(e,n,t),n.__esModule&&n.default&&(e.exports=n.default),e.exports.template=r,e.exports.style=i}),__weex_bootstrap__("@weex-component/8c435569e8c8791c3994cac0929b1756",void 0,void 0)},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,n,e){var r=e(33),i=e(34),o=e(35),a=e(37),s="prototype",c=function(t,n,e){var u,f,l,d=t&c.F,p=t&c.G,h=t&c.S,v=t&c.P,g=t&c.B,x=t&c.W,y=p?i:i[n]||(i[n]={}),m=y[s],b=p?r:h?r[n]:(r[n]||{})[s];p&&(e=n);for(u in e)f=!d&&b&&void 0!==b[u],f&&u in y||(l=f?b[u]:e[u],y[u]=p&&"function"!=typeof b[u]?e[u]:g&&f?o(l,r):x&&b[u]==l?function(t){var n=function(n,e,r){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(n);case 2:return new t(n,e)}return new t(n,e,r)}return t.apply(this,arguments)};return n[s]=t[s],n}(l):v&&"function"==typeof l?o(Function.call,l):l,v&&((y.virtual||(y.virtual={}))[u]=l,t&c.R&&m&&!m[u]&&a(m,u,l)))};c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n){var e=t.exports={version:"2.4.0"};"number"==typeof __e&&(__e=e)},function(t,n,e){var r=e(36);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,i){return t.call(n,e,r,i)}}return function(){return t.apply(n,arguments)}}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n,e){var r=e(38),i=e(46);t.exports=e(42)?function(t,n,e){return r.f(t,n,i(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var r=e(39),i=e(41),o=e(45),a=Object.defineProperty;n.f=e(42)?Object.defineProperty:function(t,n,e){if(r(t),n=o(n,!0),r(e),i)try{return a(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){var r=e(40);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,e){t.exports=!e(42)&&!e(43)(function(){return 7!=Object.defineProperty(e(44)("div"),"a",{get:function(){return 7}}).a})},function(t,n,e){t.exports=!e(43)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n,e){var r=e(40),i=e(33).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,n,e){var r=e(40);t.exports=function(t,n){if(!r(t))return t;var e,i;if(n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;if("function"==typeof(e=t.valueOf)&&!r(i=e.call(t)))return i;if(!n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},,function(t,n,e){var r=e(49),i=e(62);t.exports=Object.keys||function(t){return r(t,i)}},function(t,n,e){var r=e(50),i=e(51),o=e(55)(!1),a=e(59)("IE_PROTO");t.exports=function(t,n){var e,s=i(t),c=0,u=[];for(e in s)e!=a&&r(s,e)&&u.push(e);for(;n.length>c;)r(s,e=n[c++])&&(~o(u,e)||u.push(e));return u}},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n,e){var r=e(52),i=e(54);t.exports=function(t){return r(i(t))}},function(t,n,e){var r=e(53);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,n){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n,e){var r=e(51),i=e(56),o=e(58);t.exports=function(t){return function(n,e,a){var s,c=r(n),u=i(c.length),f=o(a,u);if(t&&e!=e){for(;u>f;)if(s=c[f++],s!=s)return!0}else for(;u>f;f++)if((t||f in c)&&c[f]===e)return t||f||0;return!t&&-1}}},function(t,n,e){var r=e(57),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},function(t,n,e){var r=e(57),i=Math.max,o=Math.min;t.exports=function(t,n){return t=r(t),t<0?i(t+n,0):o(t,n)}},function(t,n,e){var r=e(60)("keys"),i=e(61);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,n,e){var r=e(33),i="__core-js_shared__",o=r[i]||(r[i]={});t.exports=function(t){return o[t]||(o[t]={})}},function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},,,function(t,n,e){var r=e(54);t.exports=function(t){return Object(r(t))}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,n,e){"use strict";var r=e(95)(!0);e(96)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,e=this._i;return e>=n.length?{value:void 0,done:!0}:(t=r(n,e),this._i+=t.length,{value:t,done:!1})})},function(t,n,e){var r=e(57),i=e(54);t.exports=function(t){return function(n,e){var o,a,s=String(i(n)),c=r(e),u=s.length;return c<0||c>=u?t?"":void 0:(o=s.charCodeAt(c),o<55296||o>56319||c+1===u||(a=s.charCodeAt(c+1))<56320||a>57343?t?s.charAt(c):o:t?s.slice(c,c+2):(o-55296<<10)+(a-56320)+65536)}}},function(t,n,e){"use strict";var r=e(97),i=e(32),o=e(98),a=e(37),s=e(50),c=e(99),u=e(100),f=e(104),l=e(106),d=e(105)("iterator"),p=!([].keys&&"next"in[].keys()),h="@@iterator",v="keys",g="values",x=function(){return this};t.exports=function(t,n,e,y,m,b,w){u(e,n,y);var _,L,X,D=function(t){if(!p&&t in j)return j[t];switch(t){case v:return function(){return new e(this,t)};case g:return function(){return new e(this,t)}}return function(){return new e(this,t)}},O=n+" Iterator",S=m==g,I=!1,j=t.prototype,k=j[d]||j[h]||m&&j[m],C=k||D(m),N=m?S?D("entries"):C:void 0,T="Array"==n?j.entries||k:k;if(T&&(X=l(T.call(new t)),X!==Object.prototype&&(f(X,O,!0),r||s(X,d)||a(X,d,x))),S&&k&&k.name!==g&&(I=!0,C=function(){return k.call(this)}),r&&!w||!p&&!I&&j[d]||a(j,d,C),c[n]=C,c[O]=x,m)if(_={values:S?C:D(g),keys:b?C:D(v),entries:N},w)for(L in _)L in j||o(j,L,_[L]);else i(i.P+i.F*(p||I),n,_);return _}},function(t,n){t.exports=!0},function(t,n,e){t.exports=e(37)},function(t,n){t.exports={}},function(t,n,e){"use strict";var r=e(101),i=e(46),o=e(104),a={};e(37)(a,e(105)("iterator"),function(){return this}),t.exports=function(t,n,e){t.prototype=r(a,{next:i(1,e)}),o(t,n+" Iterator")}},function(t,n,e){var r=e(39),i=e(102),o=e(62),a=e(59)("IE_PROTO"),s=function(){},c="prototype",u=function(){var t,n=e(44)("iframe"),r=o.length,i="<",a=">";for(n.style.display="none",e(103).appendChild(n),n.src="javascript:",t=n.contentWindow.document,t.open(),t.write(i+"script"+a+"document.F=Object"+i+"/script"+a),t.close(),u=t.F;r--;)delete u[c][o[r]];return u()};t.exports=Object.create||function(t,n){var e;return null!==t?(s[c]=r(t),e=new s,s[c]=null,e[a]=t):e=u(),void 0===n?e:i(e,n)}},function(t,n,e){var r=e(38),i=e(39),o=e(48);t.exports=e(42)?Object.defineProperties:function(t,n){i(t);for(var e,a=o(n),s=a.length,c=0;s>c;)r.f(t,e=a[c++],n[e]);return t}},function(t,n,e){t.exports=e(33).document&&document.documentElement},function(t,n,e){var r=e(38).f,i=e(50),o=e(105)("toStringTag");t.exports=function(t,n,e){t&&!i(t=e?t:t.prototype,o)&&r(t,o,{configurable:!0,value:n})}},function(t,n,e){var r=e(60)("wks"),i=e(61),o=e(33).Symbol,a="function"==typeof o,s=t.exports=function(t){return r[t]||(r[t]=a&&o[t]||(a?o:i)("Symbol."+t))};s.store=r},function(t,n,e){var r=e(50),i=e(65),o=e(59)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,n,e){t.exports={default:e(187),__esModule:!0}},function(t,n,e){e(94),e(188),t.exports=e(34).Array.from},function(t,n,e){"use strict";var r=e(35),i=e(32),o=e(65),a=e(189),s=e(190),c=e(56),u=e(191),f=e(192);i(i.S+i.F*!e(194)(function(t){Array.from(t)}),"Array",{from:function(t){var n,e,i,l,d=o(t),p="function"==typeof this?this:Array,h=arguments.length,v=h>1?arguments[1]:void 0,g=void 0!==v,x=0,y=f(d);if(g&&(v=r(v,h>2?arguments[2]:void 0,2)),void 0==y||p==Array&&s(y))for(n=c(d.length),e=new p(n);n>x;x++)u(e,x,g?v(d[x],x):d[x]);else for(l=y.call(d),e=new p;!(i=l.next()).done;x++)u(e,x,g?a(l,v,[i.value,x],!0):i.value);return e.length=x,e}})},function(t,n,e){var r=e(39);t.exports=function(t,n,e,i){try{return i?n(r(e)[0],e[1]):n(e)}catch(n){var o=t.return;throw void 0!==o&&r(o.call(t)),n}}},function(t,n,e){var r=e(99),i=e(105)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},function(t,n,e){"use strict";var r=e(38),i=e(46);t.exports=function(t,n,e){n in t?r.f(t,n,i(0,e)):t[n]=e}},function(t,n,e){var r=e(193),i=e(105)("iterator"),o=e(99);t.exports=e(34).getIteratorMethod=function(t){if(void 0!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,n,e){var r=e(53),i=e(105)("toStringTag"),o="Arguments"==r(function(){return arguments}()),a=function(t,n){try{return t[n]}catch(t){}};t.exports=function(t){var n,e,s;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=a(n=Object(t),i))?e:o?r(n):"Object"==(s=r(n))&&"function"==typeof n.callee?"Arguments":s}},function(t,n,e){var r=e(105)("iterator"),i=!1;try{var o=[7][r]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}t.exports=function(t,n){if(!n&&!i)return!1;var e=!1;try{var o=[7],a=o[r]();a.next=function(){return{done:e=!0}},o[r]=function(){return a},t(o)}catch(t){}return e}},function(t,n,e){t.exports={default:e(196),__esModule:!0}},function(t,n,e){var r=e(34),i=r.JSON||(r.JSON={stringify:JSON.stringify});t.exports=function(t){return i.stringify.apply(i,arguments)}},,,,,,,,,,function(t,n,e){var r=e(207),i=e(208),o=e(209);__weex_define__("@weex-component/unit",[],function(t,n,e){o(e,n,t),n.__esModule&&n.default&&(e.exports=n.default),e.exports.template=r,e.exports.style=i})},function(t,n){t.exports={type:"div",classList:["unit-box"],children:[{type:"text",classList:["unit-number"],style:{fontSize:function(){return this.numberSize}},attr:{value:function(){return this.number}}},{type:"text",classList:["unit-text"],attr:{value:function(){return this.label}}}]}},function(t,n){t.exports={"unit-box":{flexDirection:"row",justifyContent:"center",alignItems:"flex-end"},"unit-number":{display:"inline-block",fontSize:50,color:"#111111"},"unit-text":{fontSize:22,color:"#333333",paddingLeft:20,justifyContent:"flex-end",alignItems:"flex-end"}}},function(t,n){t.exports=function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default={}}},,,,function(t,n){t.exports={type:"div",classList:["message"],children:[{type:"image",shown:function(){return this.loading},classList:["loading-gif"],attr:{src:"http://img1.vued.vanthink.cn/vuedf072471d0b97d612282d1ce010cb1de1.gif"}},{type:"text",classList:["message-text"],attr:{value:function(){return this.message}}}]}},function(t,n){t.exports={message:{zIndex:2001,position:"absolute",left:30,top:30,height:60,borderRadius:30,paddingLeft:30,paddingRight:30,backgroundColor:"#ffffff",flexDirection:"row",alignItems:"center"},"message-text":{fontSize:20},"loading-gif":{width:30,height:30}}},function(t,n){t.exports=function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default={}}},,,,function(t,n){t.exports={type:"div",classList:["success"],children:[{type:"div",classList:["success-data"],children:[{type:"div",classList:["distance-wrap"],children:[{type:"text",classList:["distance"],attr:{value:function(){return this.data.miles}}},{type:"text",classList:["unit"],attr:{value:"公里"}}]},{type:"div",classList:["dashboard"],children:[{type:"div",classList:["dashboard-item"],children:[{type:"div",classList:["time-wrap"],children:[{type:"text",classList:["dashboard-title"],attr:{value:"运动时间"}},{type:"text",classList:["number-lg"],attr:{value:function(){return this.data.time}}}]}]},{type:"div",classList:["dashboard-item"],children:[{type:"text",classList:["dashboard-title"],attr:{value:"热量"}},{type:"text",classList:["number-lg"],attr:{value:function(){return this.data.calories}}}]}]}]},{type:"div",style:{alignItems:"center"},children:[{type:"div",classList:["btn-leave"],events:{click:"pop"},children:[{type:"text",classList:["btn-leave-text"],attr:{value:"确认完成"}}]}]}]}},function(t,n){t.exports={success:{zIndex:10002,position:"absolute",top:0,bottom:0,left:0,right:0,backgroundColor:"rgba(0,0,0,0.85)",justifyContent:"center"},"distance-wrap":{flexDirection:"row",justifyContent:"center",alignItems:"center"},distance:{display:"inline-block",fontSize:220,color:"#ffffff"},unit:{fontSize:22,color:"#cccccc",paddingTop:30,paddingLeft:20},dashboard:{flexDirection:"row",alignItems:"center"},"dashboard-title":{color:"#999999",fontSize:25,marginBottom:20},"dashboard-item":{flex:1,paddingLeft:40,justifyContent:"center",alignItems:"center"},"number-lg":{fontSize:50,color:"#ffffff"},"btn-leave":{width:400,padding:20,marginTop:60,borderWidth:4,borderColor:"#ffffff",alignItems:"center",borderRadius:10},"btn-leave-text":{color:"#ffffff"}}},function(t,n,e){t.exports=function(t,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),e(206);var i=r("@weex-module/navigator");n.default={methods:{pop:function(){i.pop()}}}}},,,,,,,,,,,function(t,n,e){var r=e(213),i=e(214),o=e(215);__weex_define__("@weex-component/message",[],function(t,n,e){o(e,n,t),n.__esModule&&n.default&&(e.exports=n.default),e.exports.template=r,e.exports.style=i})},function(t,n,e){var r=e(219),i=e(220),o=e(221);__weex_define__("@weex-component/success",[],function(t,n,e){o(e,n,t),n.__esModule&&n.default&&(e.exports=n.default),e.exports.template=r,e.exports.style=i})},,,,function(t,n){t.exports={type:"div",classList:["container"],children:[{type:"weex-amap",id:"map2017",attr:{geolocation:"true",center:function(){return this.pos},sdkKey:function(){return this.keys},zoom:function(){return this.zoom}},classList:["map"],children:[{type:"weex-amap-polyline",attr:{path:function(){return this.polylinePath},strokeOpacity:"0.9",strokeStyle:"solid",strokeWidth:"8",strokeColor:"#1ba1e2"}}]},{type:"div",classList:["map-controller"],shown:function(){return 4!=this.status},children:[{type:"div",classList:["distance-wrap"],children:[{type:"text",classList:["distance"],attr:{value:function(){return this.runningData.miles}}},{type:"text",classList:["unit"],attr:{value:"公里"}}]},{type:"div",classList:["dashboard"],children:[{type:"div",classList:["dashboard-item"],children:[{type:"div",classList:["time-wrap"],children:[{type:"text",classList:["dashboard-title"],attr:{value:"运动时间"}},{type:"text",classList:["number-lg"],attr:{value:function(){return this.runningData.time}}}]}]},{type:"div",classList:["dashboard-item"],children:[{type:"text",classList:["dashboard-title"],attr:{value:"配速"}},{type:"text",classList:["number-lg"],attr:{value:function(){return this.runningData.speed}}}]},{type:"div",classList:["dashboard-item"],children:[{type:"text",classList:["dashboard-title"],attr:{value:"热量"}},{type:"text",classList:["number-lg"],attr:{value:function(){return this.runningData.calories}}}]}]},{type:"div",classList:["btn-wrap"],children:[{type:"div",classList:["btn-circle","btn-green"],shown:function(){return 1==this.status},events:{click:"start"},children:[{type:"image",classList:["btn-icon"],attr:{src:"https://gw.alicdn.com/tfs/TB1sGrEQXXXXXc4XVXXXXXXXXXX-60-60.png"}}]},{type:"div",classList:["btn-circle","btn-midnight"],shown:function(){return 2==this.status||3==this.status},events:{click:"end"},children:[{type:"image",classList:["btn-icon"],attr:{src:"https://gw.alicdn.com/tfs/TB1uEnqQXXXXXcdapXXXXXXXXXX-60-60.png"}}]},{type:"div",classList:["btn-circle","btn-green"],shown:function(){return 3==this.status},events:{click:"continue"},children:[{type:"image",classList:["btn-icon"],attr:{src:"https://gw.alicdn.com/tfs/TB1sGrEQXXXXXc4XVXXXXXXXXXX-60-60.png"}}]},{type:"div",classList:["btn-circle","btn-red"],shown:function(){return 2==this.status},events:{click:"stop"},children:[{type:"image",classList:["btn-icon"],attr:{src:"https://gw.alicdn.com/tfs/TB1A6vJQXXXXXa0XVXXXXXXXXXX-60-60.png"}}]},{type:"div",classList:["btn-circle","btn-red"],shown:function(){return 5==this.status},events:{click:"backHome"},children:[{type:"text",classList:["btn-text"],attr:{value:"返回"}}]}]}]},{type:"success",shown:function(){return 4==this.status},attr:{data:function(){return this.runningData}}}]}},function(t,n){t.exports={container:{position:"relative",flex:1,minHeight:600,backgroundColor:"#eeeeee"},"countdown-view":{zIndex:10001,position:"absolute",left:0,right:0,top:0,bottom:0,backgroundColor:"#ffffff",alignItems:"center",justifyContent:"center"},"countdown-text":{color:"#ff656d",fontSize:120},map:{flex:1,minHeight:600},"map-controller":{zIndex:1e4,position:"absolute",left:0,right:0,bottom:0,height:500,backgroundColor:"rgba(255,255,255,1)",borderTopWidth:2,borderTopColor:"rgba(0,0,0,0.25)"},"distance-wrap":{flex:1,flexDirection:"row",justifyContent:"center",alignItems:"center"},distance:{display:"inline-block",fontSize:90,color:"#111111"},unit:{fontSize:22,color:"#333333",paddingTop:30,paddingLeft:20},dashboard:{flex:1,flexDirection:"row"},"dashboard-title":{color:"#999999",fontSize:25,marginBottom:20},"dashboard-item":{flex:1,paddingLeft:40,justifyContent:"center"},"number-lg":{fontSize:42,color:"#222222"},"btn-wrap":{flex:1,flexDirection:"row",alignItems:"center",justifyContent:"center"},"btn-circle":{width:140,height:140,marginLeft:40,marginRight:40,borderRadius:120,alignItems:"center",justifyContent:"center",backgroundColor:"#eeeeee"},"btn-text":{fontSize:30,color:"#ffffff"},"btn-icon":{width:60,height:60},"btn-red":{backgroundColor:"#ff626d"},"btn-green":{backgroundColor:"#21d45f"},"btn-midnight":{backgroundColor:"#34495e"}}},function(t,n,e){t.exports=function(t,n,r){"use strict";function i(t){return t&&t.__esModule?t:{default:t}}var o=e(186),a=i(o),s=e(195),c=i(s),u=e(!function(){var t=new Error('Cannot find module "./lib/utils"');throw t.code="MODULE_NOT_FOUND",t}()),f=e(!function(){var t=new Error('Cannot find module "./lib/status"');throw t.code="MODULE_NOT_FOUND",t}());e(232),e(206),e(233);var l=r("@weex-module/storage"),d=r("@weex-module/amap"),p=r("@weex-module/navigator");t.exports={data:function(){return{keys:{h5:"f4b99dcd51752142ec0f1bdcb9a8ec02",ios:"c551f83e1e5b19af89c74096f1c0f007",android:"db6a973159cb0c2639ad02c617a786ae"},zoom:16,pos:[116.48635,40.00079],status:f.RUNNING_READY,runningData:{distance:0,miles:0,path:[],time:"00:00:00",seconds:0,speed:0,calories:0},polylinePath:[],timeRecorder:null,amapRecorder:null,test:!1,color:"#1ba1e2"}},methods:{start:function(){this.status=f.RUNNING_DOING,this.countDownTime(),this.runningAmapGeolocation()},backHome:function(){p.pop()},stop:function(){this.status=f.RUNNING_PAUSE,clearInterval(this.timeRecorder),clearInterval(this.amapRecorder)},continue:function(){this.countDownTime(),this.runningAmapGeolocation(),this.status=f.RUNNING_DOING},end:function(){clearInterval(this.timeRecorder),clearInterval(this.amapRecorder);var t=this;l.getItem("runningData",function(n){var e=[];"success"==n.result&&(e=n.data),"string"==typeof e&&(e=JSON.parse(e)),e.unshift(u.extend({date:u.getDate().replace(/\s.+/,""),standrandDate:u.getDate()},t.runningData)),l.setItem("runningData",(0,c.default)(e),function(n){"success"==n.result&&(t.status=f.RUNNING_END)})})},setUserLocation:function(t){d.getUserLocation(this.$el("map2017").ref,t)},countDownTime:function(){var t=this;this.timeRecorder=setInterval(function(){t.runningData.seconds++,t.runningData.seconds<=4&&(3==t.runningData.seconds?t.countdown.text="GO!":4==t.runningData.seconds?t.countdown.show=!1:t.countdown.text=3-t.runningData.seconds),t.runningData.time=u.setTimeFormat(t.runningData.seconds)},1e3)},runningAmapGeolocation:function(){var t=this;this.setUserLocation(function(n){"success"==n.result&&(t.pos=n.data.position,t.runningData.path.push(n.data.position))}),this.amapRecorder=setInterval(function(){t.setUserLocation(function(n){if("success"==n.result){if(t.test){var e=t.runningData.path.length;t.runningData.path.push([t.runningData.path[e-1][0]+.0011,t.runningData.path[e-1][1]+.0011])}else t.runningData.path.push(n.data.position);t.polylinePath=(0,a.default)(t.runningData.path),t.pos=u.setPosition(t.runningData.path),t.calcDistanceAndSpeed()}})},1e4)},calcDistanceAndSpeed:function(){var t=this,n=this.runningData.path.length;n>1&&d.getLineDistance(this.runningData.path[n-1],this.runningData.path[n-2],function(n){"success"==n.result&&(t.runningData.distance+=n.data.distance),t.runningData.miles=u.kmtom(t.runningData.distance),t.runningData.calories=(t.runningData.distance/1e3).toFixed(2),t.runningData.speed=u.calcSpeed(t.runningData.distance,t.runningData.seconds)})}}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,