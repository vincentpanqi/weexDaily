!function(t){function e(i){if(n[i])return n[i].exports;var o=n[i]={exports:{},id:i,loaded:!1};return t[i].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){n(154);var i=n(209),o=n(210),r=n(211);__weex_define__("@weex-component/46ff71e1e6fbb3d3d562d3edb0291022",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o}),__weex_bootstrap__("@weex-component/46ff71e1e6fbb3d3d562d3edb0291022",void 0,void 0)},,,,function(t,e,n){n(5),n(9),n(13),n(17),n(21),n(25),n(66),n(70),n(74),n(78),n(79)},function(t,e,n){var i=n(6),o=n(7),r=n(8);__weex_define__("@weex-component/wxc-button",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e){t.exports={type:"div",classList:function(){return["btn","btn-"+this.type,"btn-sz-"+this.size]},children:[{type:"text",classList:function(){return["btn-txt","btn-txt-"+this.type,"btn-txt-sz-"+this.size]},attr:{value:function(){return this.value}}}]}},function(t,e){t.exports={btn:{marginBottom:0,alignItems:"center",justifyContent:"center",borderWidth:1,borderStyle:"solid",borderColor:"#333333"},"btn-default":{color:"rgb(51,51,51)"},"btn-primary":{backgroundColor:"rgb(40,96,144)",borderColor:"rgb(40,96,144)"},"btn-success":{backgroundColor:"rgb(92,184,92)",borderColor:"rgb(76,174,76)"},"btn-info":{backgroundColor:"rgb(91,192,222)",borderColor:"rgb(70,184,218)"},"btn-warning":{backgroundColor:"rgb(240,173,78)",borderColor:"rgb(238,162,54)"},"btn-danger":{backgroundColor:"rgb(217,83,79)",borderColor:"rgb(212,63,58)"},"btn-link":{borderColor:"rgba(0,0,0,0)",borderRadius:0},"btn-txt-default":{color:"rgb(51,51,51)"},"btn-txt-primary":{color:"rgb(255,255,255)"},"btn-txt-success":{color:"rgb(255,255,255)"},"btn-txt-info":{color:"rgb(255,255,255)"},"btn-txt-warning":{color:"rgb(255,255,255)"},"btn-txt-danger":{color:"rgb(255,255,255)"},"btn-txt-link":{color:"rgb(51,122,183)"},"btn-sz-large":{width:300,height:100,paddingTop:25,paddingBottom:25,paddingLeft:40,paddingRight:40,borderRadius:15},"btn-sz-middle":{width:240,height:80,paddingTop:15,paddingBottom:15,paddingLeft:30,paddingRight:30,borderRadius:10},"btn-sz-small":{width:170,height:60,paddingTop:12,paddingBottom:12,paddingLeft:25,paddingRight:25,borderRadius:7},"btn-txt-sz-large":{fontSize:45},"btn-txt-sz-middle":{fontSize:35},"btn-txt-sz-small":{fontSize:30}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{type:"default",size:"large",value:""}},methods:{}}}},function(t,e,n){var i=n(10),o=n(11),r=n(12);__weex_define__("@weex-component/wxc-hn",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e){t.exports={type:"div",classList:function(){return["h"+this.level]},style:{justifyContent:"center"},children:[{type:"text",classList:function(){return["txt-h"+this.level]},attr:{value:function(){return this.value}}}]}},function(t,e){t.exports={h1:{height:110,paddingTop:20,paddingBottom:20},h2:{height:110,paddingTop:20,paddingBottom:20},h3:{height:110,paddingTop:20,paddingBottom:20},"txt-h1":{fontSize:70},"txt-h2":{fontSize:52},"txt-h3":{fontSize:42}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{level:1,value:""}},methods:{}}}},function(t,e,n){var i=n(14),o=n(15),r=n(16);__weex_define__("@weex-component/wxc-list-item",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e){t.exports={type:"div",classList:["item"],events:{touchstart:"touchstart",touchend:"touchend"},style:{backgroundColor:function(){return this.bgColor}},children:[{type:"content"}]}},function(t,e){t.exports={item:{paddingTop:25,paddingBottom:25,paddingLeft:35,paddingRight:35,height:160,justifyContent:"center",borderBottomWidth:1,borderColor:"#dddddd"}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{bgColor:"#ffffff"}},methods:{touchstart:function(){},touchend:function(){}}}}},function(t,e,n){var i=n(18),o=n(19),r=n(20);__weex_define__("@weex-component/wxc-panel",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e){t.exports={type:"div",classList:function(){return["panel","panel-"+this.type]},style:{borderWidth:function(){return this.border}},children:[{type:"text",classList:function(){return["panel-header","panel-header-"+this.type]},style:{paddingTop:function(){return this.paddingHead},paddingBottom:function(){return this.paddingHead},paddingLeft:function(){return 1.5*this.paddingHead},paddingRight:function(){return 1.5*this.paddingHead}},attr:{value:function(){return this.title}}},{type:"div",classList:function(){return["panel-body","panel-body-"+this.type]},style:{paddingTop:function(){return this.paddingBody},paddingBottom:function(){return this.paddingBody},paddingLeft:function(){return 1.5*this.paddingBody},paddingRight:function(){return 1.5*this.paddingBody}},children:[{type:"content"}]}]}},function(t,e){t.exports={panel:{marginBottom:20,backgroundColor:"#ffffff",borderColor:"#dddddd",borderWidth:1},"panel-primary":{borderColor:"rgb(40,96,144)"},"panel-success":{borderColor:"rgb(76,174,76)"},"panel-info":{borderColor:"rgb(70,184,218)"},"panel-warning":{borderColor:"rgb(238,162,54)"},"panel-danger":{borderColor:"rgb(212,63,58)"},"panel-header":{backgroundColor:"#f5f5f5",fontSize:40,color:"#333333"},"panel-header-primary":{backgroundColor:"rgb(40,96,144)",color:"#ffffff"},"panel-header-success":{backgroundColor:"rgb(92,184,92)",color:"#ffffff"},"panel-header-info":{backgroundColor:"rgb(91,192,222)",color:"#ffffff"},"panel-header-warning":{backgroundColor:"rgb(240,173,78)",color:"#ffffff"},"panel-header-danger":{backgroundColor:"rgb(217,83,79)",color:"#ffffff"},"panel-body":{}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{type:"default",title:"",paddingBody:20,paddingHead:20,dataClass:"",border:0}},ready:function(){}}}},function(t,e,n){var i=n(22),o=n(23),r=n(24);__weex_define__("@weex-component/wxc-tip",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e){t.exports={type:"div",classList:function(){return["tip","tip-"+this.type]},children:[{type:"text",classList:function(){return["tip-txt","tip-txt-"+this.type]},attr:{value:function(){return this.value}}}]}},function(t,e){t.exports={tip:{paddingLeft:36,paddingRight:36,paddingTop:36,paddingBottom:36,borderRadius:10},"tip-txt":{fontSize:28},"tip-success":{backgroundColor:"#dff0d8",borderColor:"#d6e9c6"},"tip-txt-success":{color:"#3c763d"},"tip-info":{backgroundColor:"#d9edf7",borderColor:"#bce8f1"},"tip-txt-info":{color:"#31708f"},"tip-warning":{backgroundColor:"#fcf8e3",borderColor:"#faebcc"},"tip-txt-warning":{color:"#8a6d3b"},"tip-danger":{backgroundColor:"#f2dede",borderColor:"#ebccd1"},"tip-txt-danger":{color:"#a94442"}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{type:"success",value:""}}}}},function(t,e,n){var i=n(26),o=n(27),r=n(28);__weex_define__("@weex-component/wxc-countdown",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e){t.exports={type:"div",style:{overflow:"hidden",flexDirection:"row"},events:{appear:"appeared",disappear:"disappeared"},children:[{type:"content"}]}},function(t,e){t.exports={wrap:{overflow:"hidden"}}},function(t,e,n){t.exports=function(t,e,i){"use strict";function o(t){return t&&t.__esModule?t:{default:t}}var r=n(29),a=o(r);t.exports={data:function(){return{now:0,remain:0,time:{elapse:0,D:"0",DD:"0",h:"0",hh:"00",H:"0",HH:"0",m:"0",mm:"00",M:"0",MM:"0",s:"0",ss:"00",S:"0",SS:"0"},outofview:!1}},ready:function(){this.remain<=0||(this.now=Date.now(),this.nextTick())},methods:{nextTick:function(){this.outofview?setTimeout(this.nextTick.bind(this),1e3):(this.time.elapse=parseInt((Date.now()-this.now)/1e3),this.calc()?(this.$emit("tick",(0,a.default)({},this.time)),setTimeout(this.nextTick.bind(this),1e3)):this.$emit("alarm",(0,a.default)({},this.time)),this._app.updateActions())},format:function(t){return t.length>=2?t:"0"+t},calc:function(){var t=this.remain-this.time.elapse;return t<0&&(t=0),this.time.D=String(parseInt(t/86400)),this.time.DD=this.format(this.time.D),this.time.h=String(parseInt((t-86400*parseInt(this.time.D))/3600)),this.time.hh=this.format(this.time.h),this.time.H=String(parseInt(t/3600)),this.time.HH=this.format(this.time.H),this.time.m=String(parseInt((t-3600*parseInt(this.time.H))/60)),this.time.mm=this.format(this.time.m),this.time.M=String(parseInt(t/60)),this.time.MM=this.format(this.time.M),this.time.s=String(t-60*parseInt(this.time.M)),this.time.ss=this.format(this.time.s),this.time.S=String(t),this.time.SS=this.format(this.time.S),t>0},appeared:function(){this.outofview=!1},disappeared:function(){this.outofview=!0}}}}},function(t,e,n){t.exports={default:n(30),__esModule:!0}},function(t,e,n){n(31),t.exports=n(34).Object.assign},function(t,e,n){var i=n(32);i(i.S+i.F,"Object",{assign:n(47)})},function(t,e,n){var i=n(33),o=n(34),r=n(35),a=n(37),c="prototype",s=function(t,e,n){var u,f,l,d=t&s.F,p=t&s.G,h=t&s.S,m=t&s.P,g=t&s.B,b=t&s.W,x=p?o:o[e]||(o[e]={}),v=x[c],y=p?i:h?i[e]:(i[e]||{})[c];p&&(n=e);for(u in n)f=!d&&y&&void 0!==y[u],f&&u in x||(l=f?y[u]:n[u],x[u]=p&&"function"!=typeof y[u]?n[u]:g&&f?r(l,i):b&&y[u]==l?function(t){var e=function(e,n,i){if(this instanceof t){switch(arguments.length){case 0:return new t;case 1:return new t(e);case 2:return new t(e,n)}return new t(e,n,i)}return t.apply(this,arguments)};return e[c]=t[c],e}(l):m&&"function"==typeof l?r(Function.call,l):l,m&&((x.virtual||(x.virtual={}))[u]=l,t&s.R&&v&&!v[u]&&a(v,u,l)))};s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,s.U=64,s.R=128,t.exports=s},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e){var n=t.exports={version:"2.4.0"};"number"==typeof __e&&(__e=n)},function(t,e,n){var i=n(36);t.exports=function(t,e,n){if(i(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,i){return t.call(e,n,i)};case 3:return function(n,i,o){return t.call(e,n,i,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,n){var i=n(38),o=n(46);t.exports=n(42)?function(t,e,n){return i.f(t,e,o(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var i=n(39),o=n(41),r=n(45),a=Object.defineProperty;e.f=n(42)?Object.defineProperty:function(t,e,n){if(i(t),e=r(e,!0),i(n),o)try{return a(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var i=n(40);t.exports=function(t){if(!i(t))throw TypeError(t+" is not an object!");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){t.exports=!n(42)&&!n(43)(function(){return 7!=Object.defineProperty(n(44)("div"),"a",{get:function(){return 7}}).a})},function(t,e,n){t.exports=!n(43)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,n){var i=n(40),o=n(33).document,r=i(o)&&i(o.createElement);t.exports=function(t){return r?o.createElement(t):{}}},function(t,e,n){var i=n(40);t.exports=function(t,e){if(!i(t))return t;var n,o;if(e&&"function"==typeof(n=t.toString)&&!i(o=n.call(t)))return o;if("function"==typeof(n=t.valueOf)&&!i(o=n.call(t)))return o;if(!e&&"function"==typeof(n=t.toString)&&!i(o=n.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,n){"use strict";var i=n(48),o=n(63),r=n(64),a=n(65),c=n(52),s=Object.assign;t.exports=!s||n(43)(function(){var t={},e={},n=Symbol(),i="abcdefghijklmnopqrst";return t[n]=7,i.split("").forEach(function(t){e[t]=t}),7!=s({},t)[n]||Object.keys(s({},e)).join("")!=i})?function(t,e){for(var n=a(t),s=arguments.length,u=1,f=o.f,l=r.f;s>u;)for(var d,p=c(arguments[u++]),h=f?i(p).concat(f(p)):i(p),m=h.length,g=0;m>g;)l.call(p,d=h[g++])&&(n[d]=p[d]);return n}:s},function(t,e,n){var i=n(49),o=n(62);t.exports=Object.keys||function(t){return i(t,o)}},function(t,e,n){var i=n(50),o=n(51),r=n(55)(!1),a=n(59)("IE_PROTO");t.exports=function(t,e){var n,c=o(t),s=0,u=[];for(n in c)n!=a&&i(c,n)&&u.push(n);for(;e.length>s;)i(c,n=e[s++])&&(~r(u,n)||u.push(n));return u}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var i=n(52),o=n(54);t.exports=function(t){return i(o(t))}},function(t,e,n){var i=n(53);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==i(t)?t.split(""):Object(t)}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){var i=n(51),o=n(56),r=n(58);t.exports=function(t){return function(e,n,a){var c,s=i(e),u=o(s.length),f=r(a,u);if(t&&n!=n){for(;u>f;)if(c=s[f++],c!=c)return!0}else for(;u>f;f++)if((t||f in s)&&s[f]===n)return t||f||0;return!t&&-1}}},function(t,e,n){var i=n(57),o=Math.min;t.exports=function(t){return t>0?o(i(t),9007199254740991):0}},function(t,e){var n=Math.ceil,i=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?i:n)(t)}},function(t,e,n){var i=n(57),o=Math.max,r=Math.min;t.exports=function(t,e){return t=i(t),t<0?o(t+e,0):r(t,e)}},function(t,e,n){var i=n(60)("keys"),o=n(61);t.exports=function(t){return i[t]||(i[t]=o(t))}},function(t,e,n){var i=n(33),o="__core-js_shared__",r=i[o]||(i[o]={});t.exports=function(t){return r[t]||(r[t]={})}},function(t,e){var n=0,i=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+i).toString(36))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,n){var i=n(54);t.exports=function(t){return Object(i(t))}},function(t,e,n){var i=n(67),o=n(68),r=n(69);__weex_define__("@weex-component/wxc-marquee",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e){t.exports={type:"div",classList:["wrap"],events:{appear:"appeared",disappear:"disappeared"},children:[{type:"div",id:"anim",classList:["anim"],children:[{type:"content"}]}]}},function(t,e){t.exports={wrap:{overflow:"hidden",position:"relative"},anim:{flexDirection:"column",position:"absolute",transform:"translateY(0) translateZ(0)"}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{step:0,count:0,index:1,duration:0,interval:0,outofview:!1}},ready:function(){this.interval>0&&this.step>0&&this.duration>0&&this.nextTick()},methods:{nextTick:function(){var t=this;this.outofview?setTimeout(t.nextTick.bind(t),t.interval):setTimeout(function(){t.animation(t.nextTick.bind(t))},t.interval)},animation:function(t){var e=this,i=-e.step*e.index,o=n("@weex-module/animation");o.transition(this.$el("anim"),{styles:{transform:"translateY("+String(i)+"px) translateZ(0)"},timingFunction:"ease",duration:e.duration},function(){e.index=(e.index+1)%e.count,e.$emit("change",{index:e.index,count:e.count}),t&&t()})},appeared:function(){this.outofview=!1},disappeared:function(){this.outofview=!0}}}}},function(t,e,n){var i=n(71),o=n(72),r=n(73);__weex_define__("@weex-component/wxc-navbar",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e){t.exports={type:"div",classList:["container"],style:{height:function(){return this.height},backgroundColor:function(){return this.backgroundColor}},attr:{dataRole:function(){return this.dataRole}},children:[{type:"text",classList:["right-text"],style:{color:function(){return this.rightItemColor}},attr:{naviItemPosition:"right",value:function(){return this.rightItemTitle}},shown:function(){return!this.rightItemSrc},events:{click:"onclickrightitem"}},{type:"image",classList:["right-image"],attr:{naviItemPosition:"right",src:function(){return this.rightItemSrc}},shown:function(){return this.rightItemSrc},events:{click:"onclickrightitem"}},{type:"text",classList:["left-text"],style:{color:function(){return this.leftItemColor}},attr:{naviItemPosition:"left",value:function(){return this.leftItemTitle}},shown:function(){return!this.leftItemSrc},events:{click:"onclickleftitem"}},{type:"image",classList:["left-image"],attr:{naviItemPosition:"left",src:function(){return this.leftItemSrc}},shown:function(){return this.leftItemSrc},events:{click:"onclickleftitem"}},{type:"text",classList:["center-text"],style:{color:function(){return this.titleColor}},attr:{naviItemPosition:"center",value:function(){return this.title}}}]}},function(t,e){t.exports={container:{flexDirection:"row",position:"fixed",top:0,left:0,right:0,width:750},"right-text":{position:"absolute",bottom:28,right:32,textAlign:"right",fontSize:32,fontFamily:"'Open Sans', sans-serif"},"left-text":{position:"absolute",bottom:28,left:32,textAlign:"left",fontSize:32,fontFamily:"'Open Sans', sans-serif"},"center-text":{position:"absolute",bottom:25,left:172,right:172,textAlign:"center",fontSize:36,fontWeight:"bold"},"left-image":{position:"absolute",bottom:20,left:28,width:50,height:50},"right-image":{position:"absolute",bottom:20,right:28,width:50,height:50}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{dataRole:"navbar",backgroundColor:"black",height:88,title:"",titleColor:"black",rightItemSrc:"",rightItemTitle:"",rightItemColor:"black",leftItemSrc:"",leftItemTitle:"",leftItemColor:"black"}},methods:{onclickrightitem:function(t){this.$dispatch("naviBar.rightItem.click",{})},onclickleftitem:function(t){this.$dispatch("naviBar.leftItem.click",{})}}}}},function(t,e,n){n(70);var i=n(75),o=n(76),r=n(77);__weex_define__("@weex-component/wxc-navpage",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e){t.exports={type:"div",classList:["wrapper"],children:[{type:"wxc-navbar",attr:{dataRole:function(){return this.dataRole},height:function(){return this.height},backgroundColor:function(){return this.backgroundColor},title:function(){return this.title},titleColor:function(){return this.titleColor},leftItemSrc:function(){return this.leftItemSrc},leftItemTitle:function(){return this.leftItemTitle},leftItemColor:function(){return this.leftItemColor},rightItemSrc:function(){return this.rightItemSrc},rightItemTitle:function(){return this.rightItemTitle},rightItemColor:function(){return this.rightItemColor}}},{type:"div",classList:["wrapper"],style:{marginTop:function(){return this.height}},children:[{type:"content"}]}]}},function(t,e){t.exports={wrapper:{position:"absolute",top:0,left:0,right:0,bottom:0,width:750}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{dataRole:"navbar",backgroundColor:"black",height:88,title:"",titleColor:"black",rightItemSrc:"",rightItemTitle:"",rightItemColor:"black",leftItemSrc:"",leftItemTitle:"",leftItemColor:"black"}}}}},function(t,e,n){n(79);var i=n(83),o=n(84),r=n(85);__weex_define__("@weex-component/wxc-tabbar",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e,n){var i=n(80),o=n(81),r=n(82);__weex_define__("@weex-component/wxc-tabitem",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e){t.exports={type:"div",classList:["container"],style:{backgroundColor:function(){return this.backgroundColor}},events:{click:"onclickitem"},children:[{type:"image",classList:["top-line"],attr:{src:"http://gtms03.alicdn.com/tps/i3/TB1mdsiMpXXXXXpXXXXNw4JIXXX-640-4.png"}},{type:"image",classList:["tab-icon"],attr:{src:function(){return this.icon}}},{type:"text",classList:["tab-text"],style:{color:function(){return this.titleColor}},attr:{value:function(){return this.title}}}]}},function(t,e){t.exports={container:{flex:1,flexDirection:"column",alignItems:"center",justifyContent:"center",height:88},"top-line":{position:"absolute",top:0,left:0,right:0,height:2},"tab-icon":{marginTop:5,width:40,height:40},"tab-text":{marginTop:5,textAlign:"center",fontSize:20}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{index:0,title:"",titleColor:"#000000",icon:"",backgroundColor:"#ffffff"}},methods:{onclickitem:function(t){var e=this,n={index:e.index};e.$dispatch("tabItem.onClick",n)}}}}},function(t,e){t.exports={type:"div",classList:["wrapper"],children:[{type:"embed",classList:["content"],style:{visibility:function(){return this.visibility}},repeat:function(){return this.tabItems},attr:{src:function(){return this.src},type:"weex"}},{type:"div",classList:["tabbar"],append:"tree",children:[{type:"wxc-tabitem",repeat:function(){return this.tabItems},attr:{index:function(){return this.index},icon:function(){return this.icon},title:function(){return this.title},titleColor:function(){return this.titleColor}}}]}]}},function(t,e){t.exports={wrapper:{width:750,position:"absolute",top:0,left:0,right:0,bottom:0},content:{position:"absolute",top:0,left:0,right:0,bottom:0,marginTop:0,marginBottom:88},tabbar:{flexDirection:"row",position:"fixed",bottom:0,left:0,right:0,height:88}}},function(t,e){t.exports=function(t,e,n){"use strict";t.exports={data:function(){return{tabItems:[],selectedIndex:0,selectedColor:"#ff0000",unselectedColor:"#000000"}},created:function(){this.selected(this.selectedIndex),this.$on("tabItem.onClick",function(t){var e=t.detail;this.selectedIndex=e.index,this.selected(e.index);var n={index:e.index};this.$dispatch("tabBar.onClick",n)})},methods:{selected:function(t){for(var e=0;e<this.tabItems.length;e++){var n=this.tabItems[e];e==t?(n.icon=n.selectedImage,n.titleColor=this.selectedColor,n.visibility="visible"):(n.icon=n.image,n.titleColor=this.unselectedColor,n.visibility="hidden")}}}}}},,,,,function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{default:t}}function o(t,e){r.sendHttp({method:"GET",url:t},function(t){var n=JSON.parse(t);e(n)})}var r,a=n(91),c=i(a);__weex_define__("@weex-temp/api",function(t){r=t("@weex-module/stream")});var s={zhihuBaseurl:"http://zhihuhu.duapp.com",zhihuArticles:"/api-statis/articles/",zhihuArticle:"/article/",zhihuYear:"/api-statis/year/",zhihuMouth:"/api-statis/month",baseurl:"http://v3.wufazhuce.com:8000/api",homePage:"/hp/bymonth/",readingCarousel:"/reading/carousel",readingIndex:"/reading/index/",essay:"/essay/",serialcontent:"/serialcontent/",question:"/question/",carouselList:"/reading/carousel/",movieList:"/movie/list/",movieDetail:"/movie/detail/"};e.getHome=function(t,e){o(s.baseurl+s.homePage+t,e)},e.getZhihuArticles=function(t,e){o(s.zhihuBaseurl+s.zhihuArticles+t,e)},e.getZhihuArticle=function(t,e){o(s.zhihuBaseurl+s.zhihuArticle+t,e)},e.getZhihuYear=function(t,e){o(s.zhihuBaseurl+s.zhihuYear+t,e)},e.getZhihuMonth=function(t,e){o(s.zhihuBaseurl+s.zhihuMouth+t,e)},e.getReadingCarousel=function(t){o(s.baseurl+s.readingCarousel,t)},e.getReadingIndex=function(t,e){o(s.baseurl+s.readingIndex+t,e)},e.getEssay=function(t,e){o(s.baseurl+s.essay+t,e)},e.getSerialContent=function(t,e){o(s.baseurl+s.serialcontent+t,e)},e.getQuestionDetail=function(t,e){o(s.baseurl+s.question+t,e)},e.getCarouseList=function(t,e){o(s.baseurl+s.carouselList+t,e)},e.getMovieList=function(t,e){o(s.baseurl+s.movieList+t,e)},e.getMovieDetail=function(t,e){o(s.baseurl+s.movieDetail+t,e)},e.getZhihuList=function(t,e){o(s.baseurl+s.movieList+t,e)},e.getZhihuDetail=function(t,e){o(s.baseurl+s.movieDetail+t,e)},e.getBaseUrl=function(t,e){t=new String(t);var n,i=t.indexOf("file://assets/")>=0,o=t.indexOf("file:///")>=0&&t.indexOf("WeexDemo.app")>0;if(i)n="file://assets/dist/";else if(o)n=t.substring(0,t.lastIndexOf("/")+1);else{var r="localhost:8080",a=/\/\/([^\/]+?)\//.exec(t);a&&a.length>=2&&(r=a[1]),n="object"===("undefined"==typeof window?"undefined":(0,c.default)(window))?e?"http://"+r+"/index.html?page=./dist/":"/dist/":"http://"+r+"/dist/"}return n}},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{default:t}}e.__esModule=!0;var o=n(92),r=i(o),a=n(112),c=i(a),s="function"==typeof c.default&&"symbol"==typeof r.default?function(t){return typeof t}:function(t){return t&&"function"==typeof c.default&&t.constructor===c.default&&t!==c.default.prototype?"symbol":typeof t};e.default="function"==typeof c.default&&"symbol"===s(r.default)?function(t){return"undefined"==typeof t?"undefined":s(t)}:function(t){return t&&"function"==typeof c.default&&t.constructor===c.default&&t!==c.default.prototype?"symbol":"undefined"==typeof t?"undefined":s(t)}},function(t,e,n){t.exports={default:n(93),__esModule:!0}},function(t,e,n){n(94),n(107),t.exports=n(111).f("iterator")},function(t,e,n){"use strict";var i=n(95)(!0);n(96)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=i(e,n),this._i+=t.length,{value:t,done:!1})})},function(t,e,n){var i=n(57),o=n(54);t.exports=function(t){return function(e,n){var r,a,c=String(o(e)),s=i(n),u=c.length;return s<0||s>=u?t?"":void 0:(r=c.charCodeAt(s),r<55296||r>56319||s+1===u||(a=c.charCodeAt(s+1))<56320||a>57343?t?c.charAt(s):r:t?c.slice(s,s+2):(r-55296<<10)+(a-56320)+65536)}}},function(t,e,n){"use strict";var i=n(97),o=n(32),r=n(98),a=n(37),c=n(50),s=n(99),u=n(100),f=n(104),l=n(106),d=n(105)("iterator"),p=!([].keys&&"next"in[].keys()),h="@@iterator",m="keys",g="values",b=function(){return this};t.exports=function(t,e,n,x,v,y,w){u(n,e,x);var _,C,S,k=function(t){if(!p&&t in z)return z[t];switch(t){case m:return function(){return new n(this,t)};case g:return function(){return new n(this,t)}}return function(){return new n(this,t)}},I=e+" Iterator",L=v==g,j=!1,z=t.prototype,O=z[d]||z[h]||v&&z[v],M=O||k(v),T=v?L?k("entries"):M:void 0,F="Array"==e?z.entries||O:O;if(F&&(S=l(F.call(new t)),S!==Object.prototype&&(f(S,I,!0),i||c(S,d)||a(S,d,b))),L&&O&&O.name!==g&&(j=!0,M=function(){return O.call(this)}),i&&!w||!p&&!j&&z[d]||a(z,d,M),s[e]=M,s[I]=b,v)if(_={values:L?M:k(g),keys:y?M:k(m),entries:T},w)for(C in _)C in z||r(z,C,_[C]);else o(o.P+o.F*(p||j),e,_);return _}},function(t,e){t.exports=!0},function(t,e,n){t.exports=n(37)},function(t,e){t.exports={}},function(t,e,n){"use strict";var i=n(101),o=n(46),r=n(104),a={};n(37)(a,n(105)("iterator"),function(){return this}),t.exports=function(t,e,n){t.prototype=i(a,{next:o(1,n)}),r(t,e+" Iterator")}},function(t,e,n){var i=n(39),o=n(102),r=n(62),a=n(59)("IE_PROTO"),c=function(){},s="prototype",u=function(){var t,e=n(44)("iframe"),i=r.length,o="<",a=">";for(e.style.display="none",n(103).appendChild(e),e.src="javascript:",t=e.contentWindow.document,t.open(),t.write(o+"script"+a+"document.F=Object"+o+"/script"+a),t.close(),u=t.F;i--;)delete u[s][r[i]];return u()};t.exports=Object.create||function(t,e){var n;return null!==t?(c[s]=i(t),n=new c,c[s]=null,n[a]=t):n=u(),void 0===e?n:o(n,e)}},function(t,e,n){var i=n(38),o=n(39),r=n(48);t.exports=n(42)?Object.defineProperties:function(t,e){o(t);for(var n,a=r(e),c=a.length,s=0;c>s;)i.f(t,n=a[s++],e[n]);return t}},function(t,e,n){t.exports=n(33).document&&document.documentElement},function(t,e,n){var i=n(38).f,o=n(50),r=n(105)("toStringTag");t.exports=function(t,e,n){t&&!o(t=n?t:t.prototype,r)&&i(t,r,{configurable:!0,value:e})}},function(t,e,n){var i=n(60)("wks"),o=n(61),r=n(33).Symbol,a="function"==typeof r,c=t.exports=function(t){return i[t]||(i[t]=a&&r[t]||(a?r:o)("Symbol."+t))};c.store=i},function(t,e,n){var i=n(50),o=n(65),r=n(59)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),i(t,r)?t[r]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,e,n){n(108);for(var i=n(33),o=n(37),r=n(99),a=n(105)("toStringTag"),c=["NodeList","DOMTokenList","MediaList","StyleSheetList","CSSRuleList"],s=0;s<5;s++){var u=c[s],f=i[u],l=f&&f.prototype;l&&!l[a]&&o(l,a,u),r[u]=r.Array}},function(t,e,n){"use strict";var i=n(109),o=n(110),r=n(99),a=n(51);t.exports=n(96)(Array,"Array",function(t,e){this._t=a(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,o(1)):"keys"==e?o(0,n):"values"==e?o(0,t[n]):o(0,[n,t[n]])},"values"),r.Arguments=r.Array,i("keys"),i("values"),i("entries")},function(t,e){t.exports=function(){}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){e.f=n(105)},function(t,e,n){t.exports={default:n(113),__esModule:!0}},function(t,e,n){n(114),n(123),n(124),n(125),t.exports=n(34).Symbol},function(t,e,n){"use strict";var i=n(33),o=n(50),r=n(42),a=n(32),c=n(98),s=n(115).KEY,u=n(43),f=n(60),l=n(104),d=n(61),p=n(105),h=n(111),m=n(116),g=n(117),b=n(118),x=n(119),v=n(39),y=n(51),w=n(45),_=n(46),C=n(101),S=n(120),k=n(122),I=n(38),L=n(48),j=k.f,z=I.f,O=S.f,M=i.Symbol,T=i.JSON,F=T&&T.stringify,R="prototype",E=p("_hidden"),B=p("toPrimitive"),P={}.propertyIsEnumerable,D=f("symbol-registry"),A=f("symbols"),H=f("op-symbols"),N=Object[R],W="function"==typeof M,$=i.QObject,X=!$||!$[R]||!$[R].findChild,U=r&&u(function(){return 7!=C(z({},"a",{get:function(){return z(this,"a",{value:7}).a}})).a})?function(t,e,n){var i=j(N,e);i&&delete N[e],z(t,e,n),i&&t!==N&&z(N,e,i)}:z,J=function(t){var e=A[t]=C(M[R]);return e._k=t,e},Z=W&&"symbol"==typeof M.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof M},Y=function(t,e,n){return t===N&&Y(H,e,n),v(t),e=w(e,!0),v(n),o(A,e)?(n.enumerable?(o(t,E)&&t[E][e]&&(t[E][e]=!1),n=C(n,{enumerable:_(0,!1)})):(o(t,E)||z(t,E,_(1,{})),t[E][e]=!0),U(t,e,n)):z(t,e,n)},q=function(t,e){v(t);for(var n,i=b(e=y(e)),o=0,r=i.length;r>o;)Y(t,n=i[o++],e[n]);return t},G=function(t,e){return void 0===e?C(t):q(C(t),e)},K=function(t){var e=P.call(this,t=w(t,!0));return!(this===N&&o(A,t)&&!o(H,t))&&(!(e||!o(this,t)||!o(A,t)||o(this,E)&&this[E][t])||e)},Q=function(t,e){if(t=y(t),e=w(e,!0),t!==N||!o(A,e)||o(H,e)){var n=j(t,e);return!n||!o(A,e)||o(t,E)&&t[E][e]||(n.enumerable=!0),n}},V=function(t){for(var e,n=O(y(t)),i=[],r=0;n.length>r;)o(A,e=n[r++])||e==E||e==s||i.push(e);return i},tt=function(t){for(var e,n=t===N,i=O(n?H:y(t)),r=[],a=0;i.length>a;)!o(A,e=i[a++])||n&&!o(N,e)||r.push(A[e]);return r};W||(M=function(){if(this instanceof M)throw TypeError("Symbol is not a constructor!");var t=d(arguments.length>0?arguments[0]:void 0),e=function(n){this===N&&e.call(H,n),o(this,E)&&o(this[E],t)&&(this[E][t]=!1),U(this,t,_(1,n))};return r&&X&&U(N,t,{configurable:!0,set:e}),J(t)},c(M[R],"toString",function(){return this._k}),k.f=Q,I.f=Y,n(121).f=S.f=V,n(64).f=K,n(63).f=tt,r&&!n(97)&&c(N,"propertyIsEnumerable",K,!0),h.f=function(t){return J(p(t))}),a(a.G+a.W+a.F*!W,{Symbol:M});for(var et="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),nt=0;et.length>nt;)p(et[nt++]);for(var et=L(p.store),nt=0;et.length>nt;)m(et[nt++]);a(a.S+a.F*!W,"Symbol",{for:function(t){return o(D,t+="")?D[t]:D[t]=M(t)},keyFor:function(t){if(Z(t))return g(D,t);throw TypeError(t+" is not a symbol!")},useSetter:function(){X=!0},useSimple:function(){X=!1}}),a(a.S+a.F*!W,"Object",{
create:G,defineProperty:Y,defineProperties:q,getOwnPropertyDescriptor:Q,getOwnPropertyNames:V,getOwnPropertySymbols:tt}),T&&a(a.S+a.F*(!W||u(function(){var t=M();return"[null]"!=F([t])||"{}"!=F({a:t})||"{}"!=F(Object(t))})),"JSON",{stringify:function(t){if(void 0!==t&&!Z(t)){for(var e,n,i=[t],o=1;arguments.length>o;)i.push(arguments[o++]);return e=i[1],"function"==typeof e&&(n=e),!n&&x(e)||(e=function(t,e){if(n&&(e=n.call(this,t,e)),!Z(e))return e}),i[1]=e,F.apply(T,i)}}}),M[R][B]||n(37)(M[R],B,M[R].valueOf),l(M,"Symbol"),l(Math,"Math",!0),l(i.JSON,"JSON",!0)},function(t,e,n){var i=n(61)("meta"),o=n(40),r=n(50),a=n(38).f,c=0,s=Object.isExtensible||function(){return!0},u=!n(43)(function(){return s(Object.preventExtensions({}))}),f=function(t){a(t,i,{value:{i:"O"+ ++c,w:{}}})},l=function(t,e){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!r(t,i)){if(!s(t))return"F";if(!e)return"E";f(t)}return t[i].i},d=function(t,e){if(!r(t,i)){if(!s(t))return!0;if(!e)return!1;f(t)}return t[i].w},p=function(t){return u&&h.NEED&&s(t)&&!r(t,i)&&f(t),t},h=t.exports={KEY:i,NEED:!1,fastKey:l,getWeak:d,onFreeze:p}},function(t,e,n){var i=n(33),o=n(34),r=n(97),a=n(111),c=n(38).f;t.exports=function(t){var e=o.Symbol||(o.Symbol=r?{}:i.Symbol||{});"_"==t.charAt(0)||t in e||c(e,t,{value:a.f(t)})}},function(t,e,n){var i=n(48),o=n(51);t.exports=function(t,e){for(var n,r=o(t),a=i(r),c=a.length,s=0;c>s;)if(r[n=a[s++]]===e)return n}},function(t,e,n){var i=n(48),o=n(63),r=n(64);t.exports=function(t){var e=i(t),n=o.f;if(n)for(var a,c=n(t),s=r.f,u=0;c.length>u;)s.call(t,a=c[u++])&&e.push(a);return e}},function(t,e,n){var i=n(53);t.exports=Array.isArray||function(t){return"Array"==i(t)}},function(t,e,n){var i=n(51),o=n(121).f,r={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],c=function(t){try{return o(t)}catch(t){return a.slice()}};t.exports.f=function(t){return a&&"[object Window]"==r.call(t)?c(t):o(i(t))}},function(t,e,n){var i=n(49),o=n(62).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return i(t,o)}},function(t,e,n){var i=n(64),o=n(46),r=n(51),a=n(45),c=n(50),s=n(41),u=Object.getOwnPropertyDescriptor;e.f=n(42)?u:function(t,e){if(t=r(t),e=a(e,!0),s)try{return u(t,e)}catch(t){}if(c(t,e))return o(!i.f.call(t,e),t[e])}},function(t,e){},function(t,e,n){n(116)("asyncIterator")},function(t,e,n){n(116)("observable")},,,,,,,,,,,,,,,,,,,,,,,,function(t,e){t.exports={type:"div",style:{width:750,height:240,backgroundColor:"#e0e0e0",justifyContent:"center",alignItems:"center"},children:[{type:"div",classList:["container"],children:[{type:"text",classList:["text"],attr:{value:function(){return this.title}}},{type:"image",classList:["image"],attr:{resize:"cover",src:function(){return this.image}}}]}]}},function(t,e){t.exports={container:{flexDirection:"row",width:720,height:220,marginLeft:15,marginRight:15,borderRadius:5,backgroundColor:"#ffffff"},image:{marginTop:30,width:180,height:160,marginRight:30},text:{flex:1,fontSize:30,marginTop:30,marginLeft:30,marginRight:10,color:"#333333"}}},function(t,e,n){t.exports=function(t,e,i){"use strict";n(4),t.exports={computed:{title:{get:function(){return this.item&&this.item.title?this.item.title:""}},image:{get:function(){return this.item&&this.item.image?this.item.image:""}}},data:function(){return{item:{}}},methods:{}}}},,,function(t,e,n){var i=n(155),o=n(156),r=n(157);__weex_define__("@weex-component/nav-bar",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e){t.exports={type:"div",classList:["nav_bar"],children:[{type:"text",classList:["nav_title"],attr:{value:function(){return"WEEX "+this.title},naviItemPosition:"center"}},{type:"image",attr:{src:"http://image.wufazhuce.com/m.wufazhuce.com-menu-white.png"},classList:["nav_right_icon"],events:{click:"nav_right_click"}}]}},function(t,e){t.exports={nav_bar:{backgroundColor:"rgba(0,0,0,0.3)",flexDirection:"row",justifyContent:"space-between",alignItems:"center",height:99},nav_title:{color:"#eeeeee",textAlign:"center",fontWeight:"bold",marginLeft:20},nav_right_icon:{width:40,height:40,marginRight:25}}},function(t,e,n){t.exports=function(t,e,i){"use strict";n(4);i("@weex-module/modal");t.exports={data:function(){return{title:"",showIcon:!0,justifyContent:"space-between"}},created:function(){},methods:{nav_right_click:function(t){this.$dispatch("pickTime",{})}}}}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(t,e){t.exports={type:"div",children:[{type:"list",classList:["content"],children:[{type:"cell",append:"tree",repeat:{expression:function(){return this.storyList},value:"item"},events:{click:"onReadCellClick"},attr:{item:function(){return this.item}},children:[{type:"wxc-item-story",attr:{scope:function(){return this.item.type},item:function(){return this.item}},id:function(){return this.item.id}}]}]},{type:"nav-bar",id:"nav",attr:{title:function(){return this.nav_title}}},{type:"div",shown:function(){return this.showMenu},id:"menuDiv",style:{height:function(){return this.deviceHeight+"px"},width:750,position:"absolute",top:0,right:0,backgroundColor:"rgba(0,0,0,0.5)"},events:{click:"hideMenu"},children:[{type:"div",style:{width:300,backgroundColor:"#ffffff",position:"absolute",top:100,right:10},children:[{type:"list",classList:["list"],children:[{type:"cell",append:"tree",classList:["row"],repeat:function(){return this.rows},events:{click:"onMenuItemclick"},attr:{index:function(){return this.$index},rowdata:function(){return this.data}},children:[{type:"div",classList:["menu-item"],children:[{type:"text",classList:["menu-item-title"],attr:{value:function(){return this.data}}}]}]}]}]}]}]}},function(t,e){t.exports={content:{position:"absolute",top:90,left:0,right:0,bottom:0},"reading-list":{marginLeft:80,marginRight:80},"text-type":{color:"#FFFFFF",textAlign:"center",marginLeft:10},"menu-item":{justifyContent:"center",borderBottomWidth:2,borderBottomColor:"#c0c0c0",height:100,padding:20},"home-img":{position:"absolute",width:750,padding:0,margin:0,background:"no-repeat center center",backgroundSize:"cover"},"sentence-bg":{position:"absolute",width:750,backgroundColor:"rgba(0,0,0,0.2)"},day:{color:"#FFFFFF",textAlign:"left",fontSize:70,lineHeight:70,marginBottom:0,marginLeft:20,marginRight:20},month:{color:"#FFFFFF",textAlign:"left",fontSize:35,marginTop:11,marginLeft:20,marginRight:20},"text-content-short":{width:710,maxHeight:90,marginTop:14,color:"#FFFFFF",marginLeft:20,marginRight:20,fontSize:28,marginBottom:20,WebkitBoxOrient:"vertical"}}},function(t,e,n){t.exports=function(t,e,i){"use strict";n(4),n(212);var o=(i("@weex-module/modal"),i("@weex-module/dom"),i("@weex-module/animation"),i("@weex-module/stream"),i("@weex-module/navigator")),r=n(90),a=n(213);t.exports={data:function(){return{title:"",storyList:[],baseURL:"",value:"",current_index:0,current_translate:"",current_info_translate:"",imageList:[],showSliderContent:!0,nav_title:"热门",showMenu:!1,showMainSlider:!0,deviceHeight:1424,listIds:["9192320,8517091,9239132,9168169,9210666,9241935,9167622,9199628,9237576,9238989","9115087,9104141,9156427,9130836,9174415,9134166,9128286,9108467,9127212,9143892"],rows:[{data:"2017-02"},{data:"2017-01"}]}},created:function(){var t=this,e=this.$getConfig().bundleUrl;this.$on("pickTime",function(e){t.showMenu=!0}),t.storyList=a.JUNE1,this.baseURL=r.getBaseUrl(e,!0)},methods:{getHomeData:function(t){var e=this;e.imageList=[],r.getHome(t,function(n){var i=n.data;e.nav_title=t,e.imageList=i})},onReadCellClick:function(t){t.target.attr.item.id},openEssayDetail:function(t){var e={url:this.baseURL+"zhihu-detail.js?id="+t,animated:"true"};o.push(e,function(t){})},anim:function(t,e,n,i,o){this.$call("animation","transition",e,{styles:t,timingFunction:n,duration:i},o)},hideMenu:function(t){var e=this;this.anim({opacity:0},this.$el("menuDiv"),"ease-out",200,function(){e.showMenu=!1})},onMenuItemclick:function(t){var e=this;"2017-01"==t.target.attr.rowdata&&(e.storyList=a.JUNE1),"2017-02"==t.target.attr.rowdata&&(e.storyList=a.JUNE2),this.hideMenu(t)}}}}},function(t,e,n){var i=n(149),o=n(150),r=n(151);__weex_define__("@weex-component/wxc-item-story",[],function(t,e,n){r(n,e,t),e.__esModule&&e.default&&(n.exports=e.default),n.exports.template=i,n.exports.style=o})},function(t,e){"use strict";e.JUNE2=[{id:"8517091",title:"小事 · 谢谢你，高锰酸钾",image:"http://pic2.zhimg.com/333a1d1f48fcb8829086d0a9b52583c9.jpg",dtime:"20170208"},{id:"9167622",title:"年度热门 · 学会这招，把酸痛的肩背按得嘎嘣响，还能预防驼背",image:"http://pic1.zhimg.com/6fb40a9ea6add8707e828303ecf518d0.jpg",dtime:"20170202"},{id:"9168169",title:"年度热门 · 地上头发扫不完，厨房墙上全是油，装修时提前想好会少很多烦恼",image:"http://pic4.zhimg.com/33b2263b621623d18d2982d0e83b9ad7.jpg",dtime:"20170201"},{id:"9192320",title:"小事 · 不想生孩子",image:"http://pic4.zhimg.com/1f250e46afad96696efc05a85929d173.jpg",dtime:"20170205"},{id:"9199628",title:"组装一台电脑，我学到的是一百种知识技能",image:"http://pic4.zhimg.com/e817d5f1bf2a8cd55df03a7db0c9ada3.jpg",dtime:"20170222"},{id:"9210666",title:"小事 · 你才活了二十几岁，哪里有「来不及」",image:"http://pic3.zhimg.com/718a603d1eca2e28b1bd33f1e2f874fa.jpg",dtime:"20170211"},{id:"9237576",title:"3 条与领导沟通的极简原则",image:"http://pic4.zhimg.com/71b69a8bb3d28d9939de4341e7f1e2e3.jpg",dtime:"20170221"},{id:"9238989",title:"小事 · 碰到「聋哑人」乞讨的正确做法",image:"http://pic3.zhimg.com/12adf810be0546f5646a0a3978f687fe.jpg",dtime:"20170224"},{id:"9239132",title:"小事 · 误入地下核设施",image:"http://pic2.zhimg.com/abbc4338c20e7698b46a81b12a34a941.jpg",dtime:"20170221"},{id:"9241935",title:"小事 · 不许早恋",image:"http://pic4.zhimg.com/b94a437aec315b261c0c9aaf4c103b3b.jpg",dtime:"20170225"}],e.JUNE1=[{id:"9104141",title:"小事 · 我也需要你",image:"http://pic1.zhimg.com/0f3dcefca38165150e70a5da74ab1e3c.jpg",dtime:"20170105"},{id:"9108467",title:"2016 年度盘点 · 值得一说的年度最佳 app",image:"http://pic2.zhimg.com/2906f58b92572450151b3c709f37cad9.jpg",dtime:"20170102"},{id:"9115087",title:"小事 · 悲喜无常",image:"http://pic4.zhimg.com/5615a788a32c2cc9469f825c4622879b.jpg",dtime:"20170102"},{id:"9127212",title:"大误 · 和我男神谈恋爱",image:"http://pic3.zhimg.com/133ba43f50c610e8902f3730061f7c42.jpg",dtime:"20170106"},{id:"9128286",title:"买到一台新电脑之后可以做哪些事？",image:"http://pic4.zhimg.com/cf43bd5f02be6f30c71f1f0e65de022f.jpg",dtime:"20170107"},{id:"9130836",title:"小事 · 我们如何走到这一步",image:"http://pic3.zhimg.com/7cec3b515fac7a7ffcb30955186f1f82.jpg",dtime:"20170107"},{id:"9134166",title:"小事 · 我讨厌我爸爸",image:"http://pic1.zhimg.com/de74d6a37cbcb27a039207bf6213230c.jpg",dtime:"20170109"},{id:"9143892",title:"小事 · 别催婚，催也没用",image:"http://pic3.zhimg.com/ca1b872ea97801f3753e7852416ca8fa.jpg",dtime:"20170112"},{id:"9156427",title:"小事 · 两个人在一起，吃很多很多好吃的",image:"http://pic2.zhimg.com/22b0818cb127eefa8d05cccfe156d589.jpg",dtime:"20170117"},{id:"9174415",title:"小事 · 坚强小姐和倔强先生",image:"http://pic3.zhimg.com/7d75d0df4e7c76d24d070146ecfad312.jpg",dtime:"20170125"}]}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,